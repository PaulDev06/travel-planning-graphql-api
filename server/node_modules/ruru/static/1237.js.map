{"version":3,"file":"1237.js","mappings":"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","sources":["webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/theme/common/colorUtils.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/minimapColors.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/chartsColors.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/searchColors.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/editorColors.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/baseColors.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { assertNever } from '../../../base/common/assert.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport * as platform from '../../registry/common/platform.js';\nimport * as nls from '../../../nls.js';\n/**\n * Returns the css variable name for the given color identifier. Dots (`.`) are replaced with hyphens (`-`) and\n * everything is prefixed with `--vscode-`.\n *\n * @sample `editorSuggestWidget.background` is `--vscode-editorSuggestWidget-background`.\n */\nexport function asCssVariableName(colorIdent) {\n    return `--vscode-${colorIdent.replace(/\\./g, '-')}`;\n}\nexport function asCssVariable(color) {\n    return `var(${asCssVariableName(color)})`;\n}\nexport function asCssVariableWithDefault(color, defaultCssValue) {\n    return `var(${asCssVariableName(color)}, ${defaultCssValue})`;\n}\nexport function isColorDefaults(value) {\n    return value !== null && typeof value === 'object' && 'light' in value && 'dark' in value;\n}\n// color registry\nexport const Extensions = {\n    ColorContribution: 'base.contributions.colors'\n};\nexport const DEFAULT_COLOR_CONFIG_VALUE = 'default';\nclass ColorRegistry {\n    constructor() {\n        this._onDidChangeSchema = new Emitter();\n        this.onDidChangeSchema = this._onDidChangeSchema.event;\n        this.colorSchema = { type: 'object', properties: {} };\n        this.colorReferenceSchema = { type: 'string', enum: [], enumDescriptions: [] };\n        this.colorsById = {};\n    }\n    registerColor(id, defaults, description, needsTransparency = false, deprecationMessage) {\n        const colorContribution = { id, description, defaults, needsTransparency, deprecationMessage };\n        this.colorsById[id] = colorContribution;\n        const propertySchema = { type: 'string', format: 'color-hex', defaultSnippets: [{ body: '${1:#ff0000}' }] };\n        if (deprecationMessage) {\n            propertySchema.deprecationMessage = deprecationMessage;\n        }\n        if (needsTransparency) {\n            propertySchema.pattern = '^#(?:(?<rgba>[0-9a-fA-f]{3}[0-9a-eA-E])|(?:[0-9a-fA-F]{6}(?:(?![fF]{2})(?:[0-9a-fA-F]{2}))))?$';\n            propertySchema.patternErrorMessage = nls.localize('transparecyRequired', 'This color must be transparent or it will obscure content');\n        }\n        this.colorSchema.properties[id] = {\n            description,\n            oneOf: [\n                propertySchema,\n                { type: 'string', const: DEFAULT_COLOR_CONFIG_VALUE, description: nls.localize('useDefault', 'Use the default color.') }\n            ]\n        };\n        this.colorReferenceSchema.enum.push(id);\n        this.colorReferenceSchema.enumDescriptions.push(description);\n        this._onDidChangeSchema.fire();\n        return id;\n    }\n    getColors() {\n        return Object.keys(this.colorsById).map(id => this.colorsById[id]);\n    }\n    resolveDefaultColor(id, theme) {\n        const colorDesc = this.colorsById[id];\n        if (colorDesc?.defaults) {\n            const colorValue = isColorDefaults(colorDesc.defaults) ? colorDesc.defaults[theme.type] : colorDesc.defaults;\n            return resolveColorValue(colorValue, theme);\n        }\n        return undefined;\n    }\n    getColorSchema() {\n        return this.colorSchema;\n    }\n    toString() {\n        const sorter = (a, b) => {\n            const cat1 = a.indexOf('.') === -1 ? 0 : 1;\n            const cat2 = b.indexOf('.') === -1 ? 0 : 1;\n            if (cat1 !== cat2) {\n                return cat1 - cat2;\n            }\n            return a.localeCompare(b);\n        };\n        return Object.keys(this.colorsById).sort(sorter).map(k => `- \\`${k}\\`: ${this.colorsById[k].description}`).join('\\n');\n    }\n}\nconst colorRegistry = new ColorRegistry();\nplatform.Registry.add(Extensions.ColorContribution, colorRegistry);\nexport function registerColor(id, defaults, description, needsTransparency, deprecationMessage) {\n    return colorRegistry.registerColor(id, defaults, description, needsTransparency, deprecationMessage);\n}\n// ----- color functions\nexport function executeTransform(transform, theme) {\n    switch (transform.op) {\n        case 0 /* ColorTransformType.Darken */:\n            return resolveColorValue(transform.value, theme)?.darken(transform.factor);\n        case 1 /* ColorTransformType.Lighten */:\n            return resolveColorValue(transform.value, theme)?.lighten(transform.factor);\n        case 2 /* ColorTransformType.Transparent */:\n            return resolveColorValue(transform.value, theme)?.transparent(transform.factor);\n        case 3 /* ColorTransformType.Opaque */: {\n            const backgroundColor = resolveColorValue(transform.background, theme);\n            if (!backgroundColor) {\n                return resolveColorValue(transform.value, theme);\n            }\n            return resolveColorValue(transform.value, theme)?.makeOpaque(backgroundColor);\n        }\n        case 4 /* ColorTransformType.OneOf */:\n            for (const candidate of transform.values) {\n                const color = resolveColorValue(candidate, theme);\n                if (color) {\n                    return color;\n                }\n            }\n            return undefined;\n        case 6 /* ColorTransformType.IfDefinedThenElse */:\n            return resolveColorValue(theme.defines(transform.if) ? transform.then : transform.else, theme);\n        case 5 /* ColorTransformType.LessProminent */: {\n            const from = resolveColorValue(transform.value, theme);\n            if (!from) {\n                return undefined;\n            }\n            const backgroundColor = resolveColorValue(transform.background, theme);\n            if (!backgroundColor) {\n                return from.transparent(transform.factor * transform.transparency);\n            }\n            return from.isDarkerThan(backgroundColor)\n                ? Color.getLighterColor(from, backgroundColor, transform.factor).transparent(transform.transparency)\n                : Color.getDarkerColor(from, backgroundColor, transform.factor).transparent(transform.transparency);\n        }\n        default:\n            throw assertNever(transform);\n    }\n}\nexport function darken(colorValue, factor) {\n    return { op: 0 /* ColorTransformType.Darken */, value: colorValue, factor };\n}\nexport function lighten(colorValue, factor) {\n    return { op: 1 /* ColorTransformType.Lighten */, value: colorValue, factor };\n}\nexport function transparent(colorValue, factor) {\n    return { op: 2 /* ColorTransformType.Transparent */, value: colorValue, factor };\n}\nexport function oneOf(...colorValues) {\n    return { op: 4 /* ColorTransformType.OneOf */, values: colorValues };\n}\nexport function ifDefinedThenElse(ifArg, thenArg, elseArg) {\n    return { op: 6 /* ColorTransformType.IfDefinedThenElse */, if: ifArg, then: thenArg, else: elseArg };\n}\nexport function lessProminent(colorValue, backgroundColorValue, factor, transparency) {\n    return { op: 5 /* ColorTransformType.LessProminent */, value: colorValue, background: backgroundColorValue, factor, transparency };\n}\n// ----- implementation\n/**\n * @param colorValue Resolve a color value in the context of a theme\n */\nexport function resolveColorValue(colorValue, theme) {\n    if (colorValue === null) {\n        return undefined;\n    }\n    else if (typeof colorValue === 'string') {\n        if (colorValue[0] === '#') {\n            return Color.fromHex(colorValue);\n        }\n        return theme.getColor(colorValue);\n    }\n    else if (colorValue instanceof Color) {\n        return colorValue;\n    }\n    else if (typeof colorValue === 'object') {\n        return executeTransform(colorValue, theme);\n    }\n    return undefined;\n}\nexport const workbenchColorsSchemaId = 'vscode://schemas/workbench-colors';\nconst schemaRegistry = platform.Registry.as(JSONExtensions.JSONContribution);\nschemaRegistry.registerSchema(workbenchColorsSchemaId, colorRegistry.getColorSchema());\nconst delayer = new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(workbenchColorsSchemaId), 200);\ncolorRegistry.onDidChangeSchema(() => {\n    if (!delayer.isScheduled()) {\n        delayer.schedule();\n    }\n});\n// setTimeout(_ => console.log(colorRegistry.toString()), 5000);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { registerColor, transparent } from '../colorUtils.js';\n// Import the colors we need\nimport { editorInfoForeground, editorWarningForeground, editorWarningBorder, editorInfoBorder } from './editorColors.js';\nimport { scrollbarSliderBackground, scrollbarSliderHoverBackground, scrollbarSliderActiveBackground } from './miscColors.js';\nexport const minimapFindMatch = registerColor('minimap.findMatchHighlight', { light: '#d18616', dark: '#d18616', hcDark: '#AB5A00', hcLight: '#0F4A85' }, nls.localize('minimapFindMatchHighlight', 'Minimap marker color for find matches.'), true);\nexport const minimapSelectionOccurrenceHighlight = registerColor('minimap.selectionOccurrenceHighlight', { light: '#c9c9c9', dark: '#676767', hcDark: '#ffffff', hcLight: '#0F4A85' }, nls.localize('minimapSelectionOccurrenceHighlight', 'Minimap marker color for repeating editor selections.'), true);\nexport const minimapSelection = registerColor('minimap.selectionHighlight', { light: '#ADD6FF', dark: '#264F78', hcDark: '#ffffff', hcLight: '#0F4A85' }, nls.localize('minimapSelectionHighlight', 'Minimap marker color for the editor selection.'), true);\nexport const minimapInfo = registerColor('minimap.infoHighlight', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoBorder, hcLight: editorInfoBorder }, nls.localize('minimapInfo', 'Minimap marker color for infos.'));\nexport const minimapWarning = registerColor('minimap.warningHighlight', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningBorder, hcLight: editorWarningBorder }, nls.localize('overviewRuleWarning', 'Minimap marker color for warnings.'));\nexport const minimapError = registerColor('minimap.errorHighlight', { dark: new Color(new RGBA(255, 18, 18, 0.7)), light: new Color(new RGBA(255, 18, 18, 0.7)), hcDark: new Color(new RGBA(255, 50, 50, 1)), hcLight: '#B5200D' }, nls.localize('minimapError', 'Minimap marker color for errors.'));\nexport const minimapBackground = registerColor('minimap.background', null, nls.localize('minimapBackground', \"Minimap background color.\"));\nexport const minimapForegroundOpacity = registerColor('minimap.foregroundOpacity', Color.fromHex('#000f'), nls.localize('minimapForegroundOpacity', 'Opacity of foreground elements rendered in the minimap. For example, \"#000000c0\" will render the elements with 75% opacity.'));\nexport const minimapSliderBackground = registerColor('minimapSlider.background', transparent(scrollbarSliderBackground, 0.5), nls.localize('minimapSliderBackground', \"Minimap slider background color.\"));\nexport const minimapSliderHoverBackground = registerColor('minimapSlider.hoverBackground', transparent(scrollbarSliderHoverBackground, 0.5), nls.localize('minimapSliderHoverBackground', \"Minimap slider background color when hovering.\"));\nexport const minimapSliderActiveBackground = registerColor('minimapSlider.activeBackground', transparent(scrollbarSliderActiveBackground, 0.5), nls.localize('minimapSliderActiveBackground', \"Minimap slider background color when clicked on.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\nimport { registerColor, transparent } from '../colorUtils.js';\nimport { foreground } from './baseColors.js';\nimport { editorErrorForeground, editorInfoForeground, editorWarningForeground } from './editorColors.js';\nimport { minimapFindMatch } from './minimapColors.js';\nexport const chartsForeground = registerColor('charts.foreground', foreground, nls.localize('chartsForeground', \"The foreground color used in charts.\"));\nexport const chartsLines = registerColor('charts.lines', transparent(foreground, .5), nls.localize('chartsLines', \"The color used for horizontal lines in charts.\"));\nexport const chartsRed = registerColor('charts.red', editorErrorForeground, nls.localize('chartsRed', \"The red color used in chart visualizations.\"));\nexport const chartsBlue = registerColor('charts.blue', editorInfoForeground, nls.localize('chartsBlue', \"The blue color used in chart visualizations.\"));\nexport const chartsYellow = registerColor('charts.yellow', editorWarningForeground, nls.localize('chartsYellow', \"The yellow color used in chart visualizations.\"));\nexport const chartsOrange = registerColor('charts.orange', minimapFindMatch, nls.localize('chartsOrange', \"The orange color used in chart visualizations.\"));\nexport const chartsGreen = registerColor('charts.green', { dark: '#89D185', light: '#388A34', hcDark: '#89D185', hcLight: '#374e06' }, nls.localize('chartsGreen', \"The green color used in chart visualizations.\"));\nexport const chartsPurple = registerColor('charts.purple', { dark: '#B180D7', light: '#652D90', hcDark: '#B180D7', hcLight: '#652D90' }, nls.localize('chartsPurple', \"The purple color used in chart visualizations.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { registerColor, transparent } from '../colorUtils.js';\n// Import the colors we need\nimport { foreground } from './baseColors.js';\nimport { editorFindMatchHighlight, editorFindMatchHighlightBorder } from './editorColors.js';\nexport const searchResultsInfoForeground = registerColor('search.resultsInfoForeground', { light: foreground, dark: transparent(foreground, 0.65), hcDark: foreground, hcLight: foreground }, nls.localize('search.resultsInfoForeground', \"Color of the text in the search viewlet's completion message.\"));\n// ----- search editor (Distinct from normal editor find match to allow for better differentiation)\nexport const searchEditorFindMatch = registerColor('searchEditor.findMatchBackground', { light: transparent(editorFindMatchHighlight, 0.66), dark: transparent(editorFindMatchHighlight, 0.66), hcDark: editorFindMatchHighlight, hcLight: editorFindMatchHighlight }, nls.localize('searchEditor.queryMatch', \"Color of the Search Editor query matches.\"));\nexport const searchEditorFindMatchBorder = registerColor('searchEditor.findMatchBorder', { light: transparent(editorFindMatchHighlightBorder, 0.66), dark: transparent(editorFindMatchHighlightBorder, 0.66), hcDark: editorFindMatchHighlightBorder, hcLight: editorFindMatchHighlightBorder }, nls.localize('searchEditor.editorFindMatchBorder', \"Border color of the Search Editor query matches.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { registerColor, transparent, lessProminent, darken, lighten } from '../colorUtils.js';\n// Import the colors we need\nimport { foreground, contrastBorder, activeContrastBorder } from './baseColors.js';\nimport { scrollbarShadow, badgeBackground } from './miscColors.js';\n// ----- editor\nexport const editorBackground = registerColor('editor.background', { light: '#ffffff', dark: '#1E1E1E', hcDark: Color.black, hcLight: Color.white }, nls.localize('editorBackground', \"Editor background color.\"));\nexport const editorForeground = registerColor('editor.foreground', { light: '#333333', dark: '#BBBBBB', hcDark: Color.white, hcLight: foreground }, nls.localize('editorForeground', \"Editor default foreground color.\"));\nexport const editorStickyScrollBackground = registerColor('editorStickyScroll.background', editorBackground, nls.localize('editorStickyScrollBackground', \"Background color of sticky scroll in the editor\"));\nexport const editorStickyScrollHoverBackground = registerColor('editorStickyScrollHover.background', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('editorStickyScrollHoverBackground', \"Background color of sticky scroll on hover in the editor\"));\nexport const editorStickyScrollBorder = registerColor('editorStickyScroll.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorStickyScrollBorder', \"Border color of sticky scroll in the editor\"));\nexport const editorStickyScrollShadow = registerColor('editorStickyScroll.shadow', scrollbarShadow, nls.localize('editorStickyScrollShadow', \" Shadow color of sticky scroll in the editor\"));\nexport const editorWidgetBackground = registerColor('editorWidget.background', { dark: '#252526', light: '#F3F3F3', hcDark: '#0C141F', hcLight: Color.white }, nls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));\nexport const editorWidgetForeground = registerColor('editorWidget.foreground', foreground, nls.localize('editorWidgetForeground', 'Foreground color of editor widgets, such as find/replace.'));\nexport const editorWidgetBorder = registerColor('editorWidget.border', { dark: '#454545', light: '#C8C8C8', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));\nexport const editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder', null, nls.localize('editorWidgetResizeBorder', \"Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.\"));\nexport const editorErrorBackground = registerColor('editorError.background', null, nls.localize('editorError.background', 'Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorErrorForeground = registerColor('editorError.foreground', { dark: '#F14C4C', light: '#E51400', hcDark: '#F48771', hcLight: '#B5200D' }, nls.localize('editorError.foreground', 'Foreground color of error squigglies in the editor.'));\nexport const editorErrorBorder = registerColor('editorError.border', { dark: null, light: null, hcDark: Color.fromHex('#E47777').transparent(0.8), hcLight: '#B5200D' }, nls.localize('errorBorder', 'If set, color of double underlines for errors in the editor.'));\nexport const editorWarningBackground = registerColor('editorWarning.background', null, nls.localize('editorWarning.background', 'Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorWarningForeground = registerColor('editorWarning.foreground', { dark: '#CCA700', light: '#BF8803', hcDark: '#FFD370', hcLight: '#895503' }, nls.localize('editorWarning.foreground', 'Foreground color of warning squigglies in the editor.'));\nexport const editorWarningBorder = registerColor('editorWarning.border', { dark: null, light: null, hcDark: Color.fromHex('#FFCC00').transparent(0.8), hcLight: Color.fromHex('#FFCC00').transparent(0.8) }, nls.localize('warningBorder', 'If set, color of double underlines for warnings in the editor.'));\nexport const editorInfoBackground = registerColor('editorInfo.background', null, nls.localize('editorInfo.background', 'Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorInfoForeground = registerColor('editorInfo.foreground', { dark: '#3794FF', light: '#1a85ff', hcDark: '#3794FF', hcLight: '#1a85ff' }, nls.localize('editorInfo.foreground', 'Foreground color of info squigglies in the editor.'));\nexport const editorInfoBorder = registerColor('editorInfo.border', { dark: null, light: null, hcDark: Color.fromHex('#3794FF').transparent(0.8), hcLight: '#292929' }, nls.localize('infoBorder', 'If set, color of double underlines for infos in the editor.'));\nexport const editorHintForeground = registerColor('editorHint.foreground', { dark: Color.fromHex('#eeeeee').transparent(0.7), light: '#6c6c6c', hcDark: null, hcLight: null }, nls.localize('editorHint.foreground', 'Foreground color of hint squigglies in the editor.'));\nexport const editorHintBorder = registerColor('editorHint.border', { dark: null, light: null, hcDark: Color.fromHex('#eeeeee').transparent(0.8), hcLight: '#292929' }, nls.localize('hintBorder', 'If set, color of double underlines for hints in the editor.'));\nexport const editorActiveLinkForeground = registerColor('editorLink.activeForeground', { dark: '#4E94CE', light: Color.blue, hcDark: Color.cyan, hcLight: '#292929' }, nls.localize('activeLinkForeground', 'Color of active links.'));\n// ----- editor selection\nexport const editorSelectionBackground = registerColor('editor.selectionBackground', { light: '#ADD6FF', dark: '#264F78', hcDark: '#f3f518', hcLight: '#0F4A85' }, nls.localize('editorSelectionBackground', \"Color of the editor selection.\"));\nexport const editorSelectionForeground = registerColor('editor.selectionForeground', { light: null, dark: null, hcDark: '#000000', hcLight: Color.white }, nls.localize('editorSelectionForeground', \"Color of the selected text for high contrast.\"));\nexport const editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', { light: transparent(editorSelectionBackground, 0.5), dark: transparent(editorSelectionBackground, 0.5), hcDark: transparent(editorSelectionBackground, 0.7), hcLight: transparent(editorSelectionBackground, 0.5) }, nls.localize('editorInactiveSelection', \"Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', { light: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), dark: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), hcDark: null, hcLight: null }, nls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('editorSelectionHighlightBorder', \"Border color for regions with the same content as the selection.\"));\n// ----- editor find\nexport const editorFindMatch = registerColor('editor.findMatchBackground', { light: '#A8AC94', dark: '#515C6A', hcDark: null, hcLight: null }, nls.localize('editorFindMatch', \"Color of the current search match.\"));\nexport const editorFindMatchForeground = registerColor('editor.findMatchForeground', null, nls.localize('editorFindMatchForeground', \"Text color of the current search match.\"));\nexport const editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', { light: '#EA5C0055', dark: '#EA5C0055', hcDark: null, hcLight: null }, nls.localize('findMatchHighlight', \"Color of the other search matches. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindMatchHighlightForeground = registerColor('editor.findMatchHighlightForeground', null, nls.localize('findMatchHighlightForeground', \"Foreground color of the other search matches.\"), true);\nexport const editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', { dark: '#3a3d4166', light: '#b4b4b44d', hcDark: null, hcLight: null }, nls.localize('findRangeHighlight', \"Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindMatchBorder = registerColor('editor.findMatchBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('editorFindMatchBorder', \"Border color of the current search match.\"));\nexport const editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('findMatchHighlightBorder', \"Border color of the other search matches.\"));\nexport const editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', { dark: null, light: null, hcDark: transparent(activeContrastBorder, 0.4), hcLight: transparent(activeContrastBorder, 0.4) }, nls.localize('findRangeHighlightBorder', \"Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\n// ----- editor hover\nexport const editorHoverHighlight = registerColor('editor.hoverHighlightBackground', { light: '#ADD6FF26', dark: '#264f7840', hcDark: '#ADD6FF26', hcLight: null }, nls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorHoverBackground = registerColor('editorHoverWidget.background', editorWidgetBackground, nls.localize('hoverBackground', 'Background color of the editor hover.'));\nexport const editorHoverForeground = registerColor('editorHoverWidget.foreground', editorWidgetForeground, nls.localize('hoverForeground', 'Foreground color of the editor hover.'));\nexport const editorHoverBorder = registerColor('editorHoverWidget.border', editorWidgetBorder, nls.localize('hoverBorder', 'Border color of the editor hover.'));\nexport const editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground', { dark: lighten(editorHoverBackground, 0.2), light: darken(editorHoverBackground, 0.05), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('statusBarBackground', \"Background color of the editor hover status bar.\"));\n// ----- editor inlay hint\nexport const editorInlayHintForeground = registerColor('editorInlayHint.foreground', { dark: '#969696', light: '#969696', hcDark: Color.white, hcLight: Color.black }, nls.localize('editorInlayHintForeground', 'Foreground color of inline hints'));\nexport const editorInlayHintBackground = registerColor('editorInlayHint.background', { dark: transparent(badgeBackground, .10), light: transparent(badgeBackground, .10), hcDark: transparent(Color.white, .10), hcLight: transparent(badgeBackground, .10) }, nls.localize('editorInlayHintBackground', 'Background color of inline hints'));\nexport const editorInlayHintTypeForeground = registerColor('editorInlayHint.typeForeground', editorInlayHintForeground, nls.localize('editorInlayHintForegroundTypes', 'Foreground color of inline hints for types'));\nexport const editorInlayHintTypeBackground = registerColor('editorInlayHint.typeBackground', editorInlayHintBackground, nls.localize('editorInlayHintBackgroundTypes', 'Background color of inline hints for types'));\nexport const editorInlayHintParameterForeground = registerColor('editorInlayHint.parameterForeground', editorInlayHintForeground, nls.localize('editorInlayHintForegroundParameter', 'Foreground color of inline hints for parameters'));\nexport const editorInlayHintParameterBackground = registerColor('editorInlayHint.parameterBackground', editorInlayHintBackground, nls.localize('editorInlayHintBackgroundParameter', 'Background color of inline hints for parameters'));\n// ----- editor lightbulb\nexport const editorLightBulbForeground = registerColor('editorLightBulb.foreground', { dark: '#FFCC00', light: '#DDB100', hcDark: '#FFCC00', hcLight: '#007ACC' }, nls.localize('editorLightBulbForeground', \"The color used for the lightbulb actions icon.\"));\nexport const editorLightBulbAutoFixForeground = registerColor('editorLightBulbAutoFix.foreground', { dark: '#75BEFF', light: '#007ACC', hcDark: '#75BEFF', hcLight: '#007ACC' }, nls.localize('editorLightBulbAutoFixForeground', \"The color used for the lightbulb auto fix actions icon.\"));\nexport const editorLightBulbAiForeground = registerColor('editorLightBulbAi.foreground', editorLightBulbForeground, nls.localize('editorLightBulbAiForeground', \"The color used for the lightbulb AI icon.\"));\n// ----- editor snippet\nexport const snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground', { dark: new Color(new RGBA(124, 124, 124, 0.3)), light: new Color(new RGBA(10, 50, 100, 0.2)), hcDark: new Color(new RGBA(124, 124, 124, 0.3)), hcLight: new Color(new RGBA(10, 50, 100, 0.2)) }, nls.localize('snippetTabstopHighlightBackground', \"Highlight background color of a snippet tabstop.\"));\nexport const snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder', null, nls.localize('snippetTabstopHighlightBorder', \"Highlight border color of a snippet tabstop.\"));\nexport const snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground', null, nls.localize('snippetFinalTabstopHighlightBackground', \"Highlight background color of the final tabstop of a snippet.\"));\nexport const snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder', { dark: '#525252', light: new Color(new RGBA(10, 50, 100, 0.5)), hcDark: '#525252', hcLight: '#292929' }, nls.localize('snippetFinalTabstopHighlightBorder', \"Highlight border color of the final tabstop of a snippet.\"));\n// ----- diff editor\nexport const defaultInsertColor = new Color(new RGBA(155, 185, 85, .2));\nexport const defaultRemoveColor = new Color(new RGBA(255, 0, 0, .2));\nexport const diffInserted = registerColor('diffEditor.insertedTextBackground', { dark: '#9ccc2c33', light: '#9ccc2c40', hcDark: null, hcLight: null }, nls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffRemoved = registerColor('diffEditor.removedTextBackground', { dark: '#ff000033', light: '#ff000033', hcDark: null, hcLight: null }, nls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffInsertedLine = registerColor('diffEditor.insertedLineBackground', { dark: defaultInsertColor, light: defaultInsertColor, hcDark: null, hcLight: null }, nls.localize('diffEditorInsertedLines', 'Background color for lines that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffRemovedLine = registerColor('diffEditor.removedLineBackground', { dark: defaultRemoveColor, light: defaultRemoveColor, hcDark: null, hcLight: null }, nls.localize('diffEditorRemovedLines', 'Background color for lines that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffInsertedLineGutter = registerColor('diffEditorGutter.insertedLineBackground', null, nls.localize('diffEditorInsertedLineGutter', 'Background color for the margin where lines got inserted.'));\nexport const diffRemovedLineGutter = registerColor('diffEditorGutter.removedLineBackground', null, nls.localize('diffEditorRemovedLineGutter', 'Background color for the margin where lines got removed.'));\nexport const diffOverviewRulerInserted = registerColor('diffEditorOverview.insertedForeground', null, nls.localize('diffEditorOverviewInserted', 'Diff overview ruler foreground for inserted content.'));\nexport const diffOverviewRulerRemoved = registerColor('diffEditorOverview.removedForeground', null, nls.localize('diffEditorOverviewRemoved', 'Diff overview ruler foreground for removed content.'));\nexport const diffInsertedOutline = registerColor('diffEditor.insertedTextBorder', { dark: null, light: null, hcDark: '#33ff2eff', hcLight: '#374E06' }, nls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));\nexport const diffRemovedOutline = registerColor('diffEditor.removedTextBorder', { dark: null, light: null, hcDark: '#FF008F', hcLight: '#AD0707' }, nls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));\nexport const diffBorder = registerColor('diffEditor.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('diffEditorBorder', 'Border color between the two text editors.'));\nexport const diffDiagonalFill = registerColor('diffEditor.diagonalFill', { dark: '#cccccc33', light: '#22222233', hcDark: null, hcLight: null }, nls.localize('diffDiagonalFill', \"Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views.\"));\nexport const diffUnchangedRegionBackground = registerColor('diffEditor.unchangedRegionBackground', 'sideBar.background', nls.localize('diffEditor.unchangedRegionBackground', \"The background color of unchanged blocks in the diff editor.\"));\nexport const diffUnchangedRegionForeground = registerColor('diffEditor.unchangedRegionForeground', 'foreground', nls.localize('diffEditor.unchangedRegionForeground', \"The foreground color of unchanged blocks in the diff editor.\"));\nexport const diffUnchangedTextBackground = registerColor('diffEditor.unchangedCodeBackground', { dark: '#74747429', light: '#b8b8b829', hcDark: null, hcLight: null }, nls.localize('diffEditor.unchangedCodeBackground', \"The background color of unchanged code in the diff editor.\"));\n// ----- widget\nexport const widgetShadow = registerColor('widget.shadow', { dark: transparent(Color.black, .36), light: transparent(Color.black, .16), hcDark: null, hcLight: null }, nls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));\nexport const widgetBorder = registerColor('widget.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('widgetBorder', 'Border color of widgets such as find/replace inside the editor.'));\n// ----- toolbar\nexport const toolbarHoverBackground = registerColor('toolbar.hoverBackground', { dark: '#5a5d5e50', light: '#b8b8b850', hcDark: null, hcLight: null }, nls.localize('toolbarHoverBackground', \"Toolbar background when hovering over actions using the mouse\"));\nexport const toolbarHoverOutline = registerColor('toolbar.hoverOutline', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('toolbarHoverOutline', \"Toolbar outline when hovering over actions using the mouse\"));\nexport const toolbarActiveBackground = registerColor('toolbar.activeBackground', { dark: lighten(toolbarHoverBackground, 0.1), light: darken(toolbarHoverBackground, 0.1), hcDark: null, hcLight: null }, nls.localize('toolbarActiveBackground', \"Toolbar background when holding the mouse over actions\"));\n// ----- breadcumbs\nexport const breadcrumbsForeground = registerColor('breadcrumb.foreground', transparent(foreground, 0.8), nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport const breadcrumbsBackground = registerColor('breadcrumb.background', editorBackground, nls.localize('breadcrumbsBackground', \"Background color of breadcrumb items.\"));\nexport const breadcrumbsFocusForeground = registerColor('breadcrumb.focusForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hcDark: lighten(foreground, 0.1), hcLight: lighten(foreground, 0.1) }, nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport const breadcrumbsActiveSelectionForeground = registerColor('breadcrumb.activeSelectionForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hcDark: lighten(foreground, 0.1), hcLight: lighten(foreground, 0.1) }, nls.localize('breadcrumbsSelectedForeground', \"Color of selected breadcrumb items.\"));\nexport const breadcrumbsPickerBackground = registerColor('breadcrumbPicker.background', editorWidgetBackground, nls.localize('breadcrumbsSelectedBackground', \"Background color of breadcrumb item picker.\"));\n// ----- merge\nconst headerTransparency = 0.5;\nconst currentBaseColor = Color.fromHex('#40C8AE').transparent(headerTransparency);\nconst incomingBaseColor = Color.fromHex('#40A6FF').transparent(headerTransparency);\nconst commonBaseColor = Color.fromHex('#606060').transparent(0.4);\nconst contentTransparency = 0.4;\nconst rulerTransparency = 1;\nexport const mergeCurrentHeaderBackground = registerColor('merge.currentHeaderBackground', { dark: currentBaseColor, light: currentBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeCurrentHeaderBackground', 'Current header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCurrentContentBackground = registerColor('merge.currentContentBackground', transparent(mergeCurrentHeaderBackground, contentTransparency), nls.localize('mergeCurrentContentBackground', 'Current content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeIncomingHeaderBackground = registerColor('merge.incomingHeaderBackground', { dark: incomingBaseColor, light: incomingBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeIncomingHeaderBackground', 'Incoming header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeIncomingContentBackground = registerColor('merge.incomingContentBackground', transparent(mergeIncomingHeaderBackground, contentTransparency), nls.localize('mergeIncomingContentBackground', 'Incoming content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCommonHeaderBackground = registerColor('merge.commonHeaderBackground', { dark: commonBaseColor, light: commonBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeCommonHeaderBackground', 'Common ancestor header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCommonContentBackground = registerColor('merge.commonContentBackground', transparent(mergeCommonHeaderBackground, contentTransparency), nls.localize('mergeCommonContentBackground', 'Common ancestor content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeBorder = registerColor('merge.border', { dark: null, light: null, hcDark: '#C3DF6F', hcLight: '#007ACC' }, nls.localize('mergeBorder', 'Border color on headers and the splitter in inline merge-conflicts.'));\nexport const overviewRulerCurrentContentForeground = registerColor('editorOverviewRuler.currentContentForeground', { dark: transparent(mergeCurrentHeaderBackground, rulerTransparency), light: transparent(mergeCurrentHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerCurrentContentForeground', 'Current overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerIncomingContentForeground = registerColor('editorOverviewRuler.incomingContentForeground', { dark: transparent(mergeIncomingHeaderBackground, rulerTransparency), light: transparent(mergeIncomingHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerIncomingContentForeground', 'Incoming overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerCommonContentForeground = registerColor('editorOverviewRuler.commonContentForeground', { dark: transparent(mergeCommonHeaderBackground, rulerTransparency), light: transparent(mergeCommonHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerCommonContentForeground', 'Common ancestor overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', { dark: '#d186167e', light: '#d186167e', hcDark: '#AB5A00', hcLight: '#AB5A00' }, nls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', '#A0A0A0CC', nls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\n// ----- problems\nexport const problemsErrorIconForeground = registerColor('problemsErrorIcon.foreground', editorErrorForeground, nls.localize('problemsErrorIconForeground', \"The color used for the problems error icon.\"));\nexport const problemsWarningIconForeground = registerColor('problemsWarningIcon.foreground', editorWarningForeground, nls.localize('problemsWarningIconForeground', \"The color used for the problems warning icon.\"));\nexport const problemsInfoIconForeground = registerColor('problemsInfoIcon.foreground', editorInfoForeground, nls.localize('problemsInfoIconForeground', \"The color used for the problems info icon.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color } from '../../../../base/common/color.js';\nimport { registerColor, transparent } from '../colorUtils.js';\nexport const foreground = registerColor('foreground', { dark: '#CCCCCC', light: '#616161', hcDark: '#FFFFFF', hcLight: '#292929' }, nls.localize('foreground', \"Overall foreground color. This color is only used if not overridden by a component.\"));\nexport const disabledForeground = registerColor('disabledForeground', { dark: '#CCCCCC80', light: '#61616180', hcDark: '#A5A5A5', hcLight: '#7F7F7F' }, nls.localize('disabledForeground', \"Overall foreground for disabled elements. This color is only used if not overridden by a component.\"));\nexport const errorForeground = registerColor('errorForeground', { dark: '#F48771', light: '#A1260D', hcDark: '#F48771', hcLight: '#B5200D' }, nls.localize('errorForeground', \"Overall foreground color for error messages. This color is only used if not overridden by a component.\"));\nexport const descriptionForeground = registerColor('descriptionForeground', { light: '#717171', dark: transparent(foreground, 0.7), hcDark: transparent(foreground, 0.7), hcLight: transparent(foreground, 0.7) }, nls.localize('descriptionForeground', \"Foreground color for description text providing additional information, for example for a label.\"));\nexport const iconForeground = registerColor('icon.foreground', { dark: '#C5C5C5', light: '#424242', hcDark: '#FFFFFF', hcLight: '#292929' }, nls.localize('iconForeground', \"The default color for icons in the workbench.\"));\nexport const focusBorder = registerColor('focusBorder', { dark: '#007FD4', light: '#0090F1', hcDark: '#F38518', hcLight: '#006BBD' }, nls.localize('focusBorder', \"Overall border color for focused elements. This color is only used if not overridden by a component.\"));\nexport const contrastBorder = registerColor('contrastBorder', { light: null, dark: null, hcDark: '#6FC3DF', hcLight: '#0F4A85' }, nls.localize('contrastBorder', \"An extra border around elements to separate them from others for greater contrast.\"));\nexport const activeContrastBorder = registerColor('contrastActiveBorder', { light: null, dark: null, hcDark: focusBorder, hcLight: focusBorder }, nls.localize('activeContrastBorder', \"An extra border around active elements to separate them from others for greater contrast.\"));\nexport const selectionBackground = registerColor('selection.background', null, nls.localize('selectionBackground', \"The background color of text selections in the workbench (e.g. for input fields or text areas). Note that this does not apply to selections within the editor.\"));\n// ------ text link\nexport const textLinkForeground = registerColor('textLink.foreground', { light: '#006AB1', dark: '#3794FF', hcDark: '#21A6FF', hcLight: '#0F4A85' }, nls.localize('textLinkForeground', \"Foreground color for links in text.\"));\nexport const textLinkActiveForeground = registerColor('textLink.activeForeground', { light: '#006AB1', dark: '#3794FF', hcDark: '#21A6FF', hcLight: '#0F4A85' }, nls.localize('textLinkActiveForeground', \"Foreground color for links in text when clicked on and on mouse hover.\"));\nexport const textSeparatorForeground = registerColor('textSeparator.foreground', { light: '#0000002e', dark: '#ffffff2e', hcDark: Color.black, hcLight: '#292929' }, nls.localize('textSeparatorForeground', \"Color for text separators.\"));\n// ------ text preformat\nexport const textPreformatForeground = registerColor('textPreformat.foreground', { light: '#A31515', dark: '#D7BA7D', hcDark: '#000000', hcLight: '#FFFFFF' }, nls.localize('textPreformatForeground', \"Foreground color for preformatted text segments.\"));\nexport const textPreformatBackground = registerColor('textPreformat.background', { light: '#0000001A', dark: '#FFFFFF1A', hcDark: '#FFFFFF', hcLight: '#09345f' }, nls.localize('textPreformatBackground', \"Background color for preformatted text segments.\"));\n// ------ text block quote\nexport const textBlockQuoteBackground = registerColor('textBlockQuote.background', { light: '#f2f2f2', dark: '#222222', hcDark: null, hcLight: '#F2F2F2' }, nls.localize('textBlockQuoteBackground', \"Background color for block quotes in text.\"));\nexport const textBlockQuoteBorder = registerColor('textBlockQuote.border', { light: '#007acc80', dark: '#007acc80', hcDark: Color.white, hcLight: '#292929' }, nls.localize('textBlockQuoteBorder', \"Border color for block quotes in text.\"));\n// ------ text code block\nexport const textCodeBlockBackground = registerColor('textCodeBlock.background', { light: '#dcdcdc66', dark: '#0a0a0a66', hcDark: Color.black, hcLight: '#F2F2F2' }, nls.localize('textCodeBlockBackground', \"Background color for code blocks in text.\"));\n"],"names":["asCssVariableName","colorIdent","replace","asCssVariable","color","asCssVariableWithDefault","defaultCssValue","Extensions","ColorContribution","colorRegistry","constructor","this","_onDidChangeSchema","onDidChangeSchema","event","colorSchema","type","properties","colorReferenceSchema","enum","enumDescriptions","colorsById","registerColor","id","defaults","description","needsTransparency","deprecationMessage","colorContribution","propertySchema","format","defaultSnippets","body","pattern","patternErrorMessage","oneOf","const","push","fire","getColors","Object","keys","map","resolveDefaultColor","theme","colorDesc","resolveColorValue","value","getColorSchema","toString","sort","a","b","cat1","indexOf","cat2","localeCompare","k","join","darken","colorValue","factor","op","lighten","transparent","colorValues","values","ifDefinedThenElse","ifArg","thenArg","elseArg","if","then","else","lessProminent","backgroundColorValue","transparency","background","fromHex","getColor","transform","backgroundColor","makeOpaque","candidate","defines","from","isDarkerThan","getLighterColor","getDarkerColor","executeTransform","add","workbenchColorsSchemaId","schemaRegistry","as","JSONContribution","registerSchema","delayer","notifySchemaChanged","isScheduled","schedule","minimapFindMatch","light","dark","hcDark","hcLight","nls","minimapSelectionOccurrenceHighlight","minimapSelection","minimapInfo","minimapWarning","minimapError","minimapBackground","minimapForegroundOpacity","editorBackground","black","white","editorForeground","editorWidgetBackground","editorWidgetForeground","editorWidgetBorder","editorErrorForeground","editorErrorBorder","editorWarningBackground","editorWarningForeground","editorWarningBorder","editorInfoForeground","editorInfoBorder","editorHintForeground","editorActiveLinkForeground","blue","cyan","editorSelectionBackground","editorSelectionForeground","editorInactiveSelection","editorSelectionHighlight","editorFindMatchForeground","editorFindMatchHighlight","editorFindMatchHighlightForeground","editorFindMatchHighlightBorder","editorFindRangeHighlightBorder","editorHoverBackground","editorHoverBorder","editorInlayHintForeground","editorInlayHintBackground","editorInlayHintTypeForeground","editorInlayHintTypeBackground","editorInlayHintParameterForeground","editorInlayHintParameterBackground","editorLightBulbForeground","defaultInsertColor","defaultRemoveColor","diffInserted","diffRemoved","diffOverviewRulerInserted","diffOverviewRulerRemoved","widgetShadow","widgetBorder","toolbarHoverBackground","breadcrumbsForeground","breadcrumbsBackground","breadcrumbsFocusForeground","breadcrumbsActiveSelectionForeground","currentBaseColor","incomingBaseColor","commonBaseColor","mergeCurrentHeaderBackground","mergeIncomingHeaderBackground","mergeCommonHeaderBackground","mergeBorder","overviewRulerFindMatchForeground","overviewRulerSelectionHighlightForeground","problemsErrorIconForeground","problemsWarningIconForeground","problemsInfoIconForeground","foreground","iconForeground","focusBorder","contrastBorder","activeContrastBorder","textLinkForeground"],"sourceRoot":""}