{"version":3,"file":"8882.js","mappings":"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","sources":["webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/jsonschemas/common/jsonContributionRegistry.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/editor/common/core/cursorColumns.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/editor/common/core/stringBuilder.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/base/common/buffer.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/registry/common/platform.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/editor/common/core/textModelDefaults.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport * as platform from '../../registry/common/platform.js';\nexport const Extensions = {\n    JSONContribution: 'base.contributions.json'\n};\nfunction normalizeId(id) {\n    if (id.length > 0 && id.charAt(id.length - 1) === '#') {\n        return id.substring(0, id.length - 1);\n    }\n    return id;\n}\nclass JSONContributionRegistry {\n    constructor() {\n        this._onDidChangeSchema = new Emitter();\n        this.schemasById = {};\n    }\n    registerSchema(uri, unresolvedSchemaContent) {\n        this.schemasById[normalizeId(uri)] = unresolvedSchemaContent;\n        this._onDidChangeSchema.fire(uri);\n    }\n    notifySchemaChanged(uri) {\n        this._onDidChangeSchema.fire(uri);\n    }\n}\nconst jsonContributionRegistry = new JSONContributionRegistry();\nplatform.Registry.add(Extensions.JSONContribution, jsonContributionRegistry);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\n/**\n * A column in a position is the gap between two adjacent characters. The methods here\n * work with a concept called \"visible column\". A visible column is a very rough approximation\n * of the horizontal screen position of a column. For example, using a tab size of 4:\n * ```txt\n * |<TAB>|<TAB>|T|ext\n * |     |     | \\---- column = 4, visible column = 9\n * |     |     \\------ column = 3, visible column = 8\n * |     \\------------ column = 2, visible column = 4\n * \\------------------ column = 1, visible column = 0\n * ```\n *\n * **NOTE**: Visual columns do not work well for RTL text or variable-width fonts or characters.\n *\n * **NOTE**: These methods work and make sense both on the model and on the view model.\n */\nexport class CursorColumns {\n    static _nextVisibleColumn(codePoint, visibleColumn, tabSize) {\n        if (codePoint === 9 /* CharCode.Tab */) {\n            return CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\n        }\n        if (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\n            return visibleColumn + 2;\n        }\n        return visibleColumn + 1;\n    }\n    /**\n     * Returns a visible column from a column.\n     * @see {@link CursorColumns}\n     */\n    static visibleColumnFromColumn(lineContent, column, tabSize) {\n        const textLen = Math.min(column - 1, lineContent.length);\n        const text = lineContent.substring(0, textLen);\n        const iterator = new strings.GraphemeIterator(text);\n        let result = 0;\n        while (!iterator.eol()) {\n            const codePoint = strings.getNextCodePoint(text, textLen, iterator.offset);\n            iterator.nextGraphemeLength();\n            result = this._nextVisibleColumn(codePoint, result, tabSize);\n        }\n        return result;\n    }\n    /**\n     * Returns a column from a visible column.\n     * @see {@link CursorColumns}\n     */\n    static columnFromVisibleColumn(lineContent, visibleColumn, tabSize) {\n        if (visibleColumn <= 0) {\n            return 1;\n        }\n        const lineContentLength = lineContent.length;\n        const iterator = new strings.GraphemeIterator(lineContent);\n        let beforeVisibleColumn = 0;\n        let beforeColumn = 1;\n        while (!iterator.eol()) {\n            const codePoint = strings.getNextCodePoint(lineContent, lineContentLength, iterator.offset);\n            iterator.nextGraphemeLength();\n            const afterVisibleColumn = this._nextVisibleColumn(codePoint, beforeVisibleColumn, tabSize);\n            const afterColumn = iterator.offset + 1;\n            if (afterVisibleColumn >= visibleColumn) {\n                const beforeDelta = visibleColumn - beforeVisibleColumn;\n                const afterDelta = afterVisibleColumn - visibleColumn;\n                if (afterDelta < beforeDelta) {\n                    return afterColumn;\n                }\n                else {\n                    return beforeColumn;\n                }\n            }\n            beforeVisibleColumn = afterVisibleColumn;\n            beforeColumn = afterColumn;\n        }\n        // walked the entire string\n        return lineContentLength + 1;\n    }\n    /**\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n     * @see {@link CursorColumns}\n     */\n    static nextRenderTabStop(visibleColumn, tabSize) {\n        return visibleColumn + tabSize - visibleColumn % tabSize;\n    }\n    /**\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n     * @see {@link CursorColumns}\n     */\n    static nextIndentTabStop(visibleColumn, indentSize) {\n        return visibleColumn + indentSize - visibleColumn % indentSize;\n    }\n    /**\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n     * @see {@link CursorColumns}\n     */\n    static prevRenderTabStop(column, tabSize) {\n        return Math.max(0, column - 1 - (column - 1) % tabSize);\n    }\n    /**\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n     * @see {@link CursorColumns}\n     */\n    static prevIndentTabStop(column, indentSize) {\n        return Math.max(0, column - 1 - (column - 1) % indentSize);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as buffer from '../../../base/common/buffer.js';\nlet _utf16LE_TextDecoder;\nfunction getUTF16LE_TextDecoder() {\n    if (!_utf16LE_TextDecoder) {\n        _utf16LE_TextDecoder = new TextDecoder('UTF-16LE');\n    }\n    return _utf16LE_TextDecoder;\n}\nlet _utf16BE_TextDecoder;\nfunction getUTF16BE_TextDecoder() {\n    if (!_utf16BE_TextDecoder) {\n        _utf16BE_TextDecoder = new TextDecoder('UTF-16BE');\n    }\n    return _utf16BE_TextDecoder;\n}\nlet _platformTextDecoder;\nexport function getPlatformTextDecoder() {\n    if (!_platformTextDecoder) {\n        _platformTextDecoder = platform.isLittleEndian() ? getUTF16LE_TextDecoder() : getUTF16BE_TextDecoder();\n    }\n    return _platformTextDecoder;\n}\nexport function decodeUTF16LE(source, offset, len) {\n    const view = new Uint16Array(source.buffer, offset, len);\n    if (len > 0 && (view[0] === 0xFEFF || view[0] === 0xFFFE)) {\n        // UTF16 sometimes starts with a BOM https://de.wikipedia.org/wiki/Byte_Order_Mark\n        // It looks like TextDecoder.decode will eat up a leading BOM (0xFEFF or 0xFFFE)\n        // We don't want that behavior because we know the string is UTF16LE and the BOM should be maintained\n        // So we use the manual decoder\n        return compatDecodeUTF16LE(source, offset, len);\n    }\n    return getUTF16LE_TextDecoder().decode(view);\n}\nfunction compatDecodeUTF16LE(source, offset, len) {\n    const result = [];\n    let resultLen = 0;\n    for (let i = 0; i < len; i++) {\n        const charCode = buffer.readUInt16LE(source, offset);\n        offset += 2;\n        result[resultLen++] = String.fromCharCode(charCode);\n    }\n    return result.join('');\n}\nexport class StringBuilder {\n    constructor(capacity) {\n        this._capacity = capacity | 0;\n        this._buffer = new Uint16Array(this._capacity);\n        this._completedStrings = null;\n        this._bufferLength = 0;\n    }\n    reset() {\n        this._completedStrings = null;\n        this._bufferLength = 0;\n    }\n    build() {\n        if (this._completedStrings !== null) {\n            this._flushBuffer();\n            return this._completedStrings.join('');\n        }\n        return this._buildBuffer();\n    }\n    _buildBuffer() {\n        if (this._bufferLength === 0) {\n            return '';\n        }\n        const view = new Uint16Array(this._buffer.buffer, 0, this._bufferLength);\n        return getPlatformTextDecoder().decode(view);\n    }\n    _flushBuffer() {\n        const bufferString = this._buildBuffer();\n        this._bufferLength = 0;\n        if (this._completedStrings === null) {\n            this._completedStrings = [bufferString];\n        }\n        else {\n            this._completedStrings[this._completedStrings.length] = bufferString;\n        }\n    }\n    /**\n     * Append a char code (<2^16)\n     */\n    appendCharCode(charCode) {\n        const remainingSpace = this._capacity - this._bufferLength;\n        if (remainingSpace <= 1) {\n            if (remainingSpace === 0 || strings.isHighSurrogate(charCode)) {\n                this._flushBuffer();\n            }\n        }\n        this._buffer[this._bufferLength++] = charCode;\n    }\n    /**\n     * Append an ASCII char code (<2^8)\n     */\n    appendASCIICharCode(charCode) {\n        if (this._bufferLength === this._capacity) {\n            // buffer is full\n            this._flushBuffer();\n        }\n        this._buffer[this._bufferLength++] = charCode;\n    }\n    appendString(str) {\n        const strLen = str.length;\n        if (this._bufferLength + strLen >= this._capacity) {\n            // This string does not fit in the remaining buffer space\n            this._flushBuffer();\n            this._completedStrings[this._completedStrings.length] = str;\n            return;\n        }\n        for (let i = 0; i < strLen; i++) {\n            this._buffer[this._bufferLength++] = str.charCodeAt(i);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Lazy } from './lazy.js';\nconst hasBuffer = (typeof Buffer !== 'undefined');\nconst indexOfTable = new Lazy(() => new Uint8Array(256));\nlet textDecoder;\nexport class VSBuffer {\n    /**\n     * When running in a nodejs context, if `actual` is not a nodejs Buffer, the backing store for\n     * the returned `VSBuffer` instance might use a nodejs Buffer allocated from node's Buffer pool,\n     * which is not transferrable.\n     */\n    static wrap(actual) {\n        if (hasBuffer && !(Buffer.isBuffer(actual))) {\n            // https://nodejs.org/dist/latest-v10.x/docs/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\n            // Create a zero-copy Buffer wrapper around the ArrayBuffer pointed to by the Uint8Array\n            actual = Buffer.from(actual.buffer, actual.byteOffset, actual.byteLength);\n        }\n        return new VSBuffer(actual);\n    }\n    constructor(buffer) {\n        this.buffer = buffer;\n        this.byteLength = this.buffer.byteLength;\n    }\n    toString() {\n        if (hasBuffer) {\n            return this.buffer.toString();\n        }\n        else {\n            if (!textDecoder) {\n                textDecoder = new TextDecoder();\n            }\n            return textDecoder.decode(this.buffer);\n        }\n    }\n}\nexport function readUInt16LE(source, offset) {\n    return (((source[offset + 0] << 0) >>> 0) |\n        ((source[offset + 1] << 8) >>> 0));\n}\nexport function writeUInt16LE(destination, value, offset) {\n    destination[offset + 0] = (value & 0b11111111);\n    value = value >>> 8;\n    destination[offset + 1] = (value & 0b11111111);\n}\nexport function readUInt32BE(source, offset) {\n    return (source[offset] * 2 ** 24\n        + source[offset + 1] * 2 ** 16\n        + source[offset + 2] * 2 ** 8\n        + source[offset + 3]);\n}\nexport function writeUInt32BE(destination, value, offset) {\n    destination[offset + 3] = value;\n    value = value >>> 8;\n    destination[offset + 2] = value;\n    value = value >>> 8;\n    destination[offset + 1] = value;\n    value = value >>> 8;\n    destination[offset] = value;\n}\nexport function readUInt8(source, offset) {\n    return source[offset];\n}\nexport function writeUInt8(destination, value, offset) {\n    destination[offset] = value;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as Assert from '../../../base/common/assert.js';\nimport * as Types from '../../../base/common/types.js';\nclass RegistryImpl {\n    constructor() {\n        this.data = new Map();\n    }\n    add(id, data) {\n        Assert.ok(Types.isString(id));\n        Assert.ok(Types.isObject(data));\n        Assert.ok(!this.data.has(id), 'There is already an extension with this id');\n        this.data.set(id, data);\n    }\n    as(id) {\n        return this.data.get(id) || null;\n    }\n}\nexport const Registry = new RegistryImpl();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport const EDITOR_MODEL_DEFAULTS = {\n    tabSize: 4,\n    indentSize: 4,\n    insertSpaces: true,\n    detectIndentation: true,\n    trimAutoWhitespace: true,\n    largeFileOptimizations: true,\n    bracketPairColorizationOptions: {\n        enabled: true,\n        independentColorPoolPerBracketType: false,\n    },\n};\n"],"names":["Extensions","JSONContribution","jsonContributionRegistry","constructor","this","_onDidChangeSchema","schemasById","registerSchema","uri","unresolvedSchemaContent","id","length","charAt","substring","fire","notifySchemaChanged","add","CursorColumns","_nextVisibleColumn","codePoint","visibleColumn","tabSize","nextRenderTabStop","visibleColumnFromColumn","lineContent","column","textLen","Math","min","text","iterator","result","eol","offset","nextGraphemeLength","columnFromVisibleColumn","lineContentLength","beforeVisibleColumn","beforeColumn","afterVisibleColumn","afterColumn","nextIndentTabStop","indentSize","prevRenderTabStop","max","prevIndentTabStop","_utf16LE_TextDecoder","_utf16BE_TextDecoder","_platformTextDecoder","getUTF16LE_TextDecoder","TextDecoder","getPlatformTextDecoder","decodeUTF16LE","source","len","view","Uint16Array","buffer","resultLen","i","charCode","String","fromCharCode","join","compatDecodeUTF16LE","decode","StringBuilder","capacity","_capacity","_buffer","_completedStrings","_bufferLength","reset","build","_flushBuffer","_buildBuffer","bufferString","appendCharCode","remainingSpace","appendASCIICharCode","appendString","str","strLen","charCodeAt","hasBuffer","Buffer","textDecoder","Uint8Array","VSBuffer","wrap","actual","isBuffer","from","byteOffset","byteLength","toString","readUInt16LE","writeUInt16LE","destination","value","readUInt32BE","writeUInt32BE","readUInt8","writeUInt8","Registry","data","Map","has","set","as","get","EDITOR_MODEL_DEFAULTS","insertSpaces","detectIndentation","trimAutoWhitespace","largeFileOptimizations","bracketPairColorizationOptions","enabled","independentColorPoolPerBracketType"],"sourceRoot":""}