{"version":3,"file":"2155.js","mappings":"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","sources":["webpack://ruru/../../node_modules/monaco-editor/esm/vs/base/common/observableInternal/utils.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/base/common/observableInternal/logging.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/editor/common/services/languageService.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/editor/common/services/languagesAssociations.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/editor/common/services/languagesRegistry.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Event } from '../event.js';\nimport { DisposableStore, toDisposable } from '../lifecycle.js';\nimport { BaseObservable, ConvenientObservable, _setKeepObserved, _setRecomputeInitiallyAndOnChange, subtransaction, transaction } from './base.js';\nimport { DebugNameData } from './debugName.js';\nimport { derived, derivedOpts } from './derived.js';\nimport { getLogger } from './logging.js';\nimport { strictEquals } from '../equals.js';\n/**\n * Represents an efficient observable whose value never changes.\n */\nexport function constObservable(value) {\n    return new ConstObservable(value);\n}\nclass ConstObservable extends ConvenientObservable {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    get debugName() {\n        return this.toString();\n    }\n    get() {\n        return this.value;\n    }\n    addObserver(observer) {\n        // NO OP\n    }\n    removeObserver(observer) {\n        // NO OP\n    }\n    toString() {\n        return `Const: ${this.value}`;\n    }\n}\nexport function observableFromEvent(...args) {\n    let owner;\n    let event;\n    let getValue;\n    if (args.length === 3) {\n        [owner, event, getValue] = args;\n    }\n    else {\n        [event, getValue] = args;\n    }\n    return new FromEventObservable(new DebugNameData(owner, undefined, getValue), event, getValue, () => FromEventObservable.globalTransaction, strictEquals);\n}\nexport function observableFromEventOpts(options, event, getValue) {\n    return new FromEventObservable(new DebugNameData(options.owner, options.debugName, options.debugReferenceFn ?? getValue), event, getValue, () => FromEventObservable.globalTransaction, options.equalsFn ?? strictEquals);\n}\nexport class FromEventObservable extends BaseObservable {\n    constructor(_debugNameData, event, _getValue, _getTransaction, _equalityComparator) {\n        super();\n        this._debugNameData = _debugNameData;\n        this.event = event;\n        this._getValue = _getValue;\n        this._getTransaction = _getTransaction;\n        this._equalityComparator = _equalityComparator;\n        this.hasValue = false;\n        this.handleEvent = (args) => {\n            const newValue = this._getValue(args);\n            const oldValue = this.value;\n            const didChange = !this.hasValue || !(this._equalityComparator(oldValue, newValue));\n            let didRunTransaction = false;\n            if (didChange) {\n                this.value = newValue;\n                if (this.hasValue) {\n                    didRunTransaction = true;\n                    subtransaction(this._getTransaction(), (tx) => {\n                        getLogger()?.handleFromEventObservableTriggered(this, { oldValue, newValue, change: undefined, didChange, hadValue: this.hasValue });\n                        for (const o of this.observers) {\n                            tx.updateObserver(o, this);\n                            o.handleChange(this, undefined);\n                        }\n                    }, () => {\n                        const name = this.getDebugName();\n                        return 'Event fired' + (name ? `: ${name}` : '');\n                    });\n                }\n                this.hasValue = true;\n            }\n            if (!didRunTransaction) {\n                getLogger()?.handleFromEventObservableTriggered(this, { oldValue, newValue, change: undefined, didChange, hadValue: this.hasValue });\n            }\n        };\n    }\n    getDebugName() {\n        return this._debugNameData.getDebugName(this);\n    }\n    get debugName() {\n        const name = this.getDebugName();\n        return 'From Event' + (name ? `: ${name}` : '');\n    }\n    onFirstObserverAdded() {\n        this.subscription = this.event(this.handleEvent);\n    }\n    onLastObserverRemoved() {\n        this.subscription.dispose();\n        this.subscription = undefined;\n        this.hasValue = false;\n        this.value = undefined;\n    }\n    get() {\n        if (this.subscription) {\n            if (!this.hasValue) {\n                this.handleEvent(undefined);\n            }\n            return this.value;\n        }\n        else {\n            // no cache, as there are no subscribers to keep it updated\n            const value = this._getValue(undefined);\n            return value;\n        }\n    }\n}\n(function (observableFromEvent) {\n    observableFromEvent.Observer = FromEventObservable;\n    function batchEventsGlobally(tx, fn) {\n        let didSet = false;\n        if (FromEventObservable.globalTransaction === undefined) {\n            FromEventObservable.globalTransaction = tx;\n            didSet = true;\n        }\n        try {\n            fn();\n        }\n        finally {\n            if (didSet) {\n                FromEventObservable.globalTransaction = undefined;\n            }\n        }\n    }\n    observableFromEvent.batchEventsGlobally = batchEventsGlobally;\n})(observableFromEvent || (observableFromEvent = {}));\nexport function observableSignalFromEvent(debugName, event) {\n    return new FromEventObservableSignal(debugName, event);\n}\nclass FromEventObservableSignal extends BaseObservable {\n    constructor(debugName, event) {\n        super();\n        this.debugName = debugName;\n        this.event = event;\n        this.handleEvent = () => {\n            transaction((tx) => {\n                for (const o of this.observers) {\n                    tx.updateObserver(o, this);\n                    o.handleChange(this, undefined);\n                }\n            }, () => this.debugName);\n        };\n    }\n    onFirstObserverAdded() {\n        this.subscription = this.event(this.handleEvent);\n    }\n    onLastObserverRemoved() {\n        this.subscription.dispose();\n        this.subscription = undefined;\n    }\n    get() {\n        // NO OP\n    }\n}\nexport function observableSignal(debugNameOrOwner) {\n    if (typeof debugNameOrOwner === 'string') {\n        return new ObservableSignal(debugNameOrOwner);\n    }\n    else {\n        return new ObservableSignal(undefined, debugNameOrOwner);\n    }\n}\nclass ObservableSignal extends BaseObservable {\n    get debugName() {\n        return new DebugNameData(this._owner, this._debugName, undefined).getDebugName(this) ?? 'Observable Signal';\n    }\n    toString() {\n        return this.debugName;\n    }\n    constructor(_debugName, _owner) {\n        super();\n        this._debugName = _debugName;\n        this._owner = _owner;\n    }\n    trigger(tx, change) {\n        if (!tx) {\n            transaction(tx => {\n                this.trigger(tx, change);\n            }, () => `Trigger signal ${this.debugName}`);\n            return;\n        }\n        for (const o of this.observers) {\n            tx.updateObserver(o, this);\n            o.handleChange(this, change);\n        }\n    }\n    get() {\n        // NO OP\n    }\n}\n/**\n * This makes sure the observable is being observed and keeps its cache alive.\n */\nexport function keepObserved(observable) {\n    const o = new KeepAliveObserver(false, undefined);\n    observable.addObserver(o);\n    return toDisposable(() => {\n        observable.removeObserver(o);\n    });\n}\n_setKeepObserved(keepObserved);\n/**\n * This converts the given observable into an autorun.\n */\nexport function recomputeInitiallyAndOnChange(observable, handleValue) {\n    const o = new KeepAliveObserver(true, handleValue);\n    observable.addObserver(o);\n    if (handleValue) {\n        handleValue(observable.get());\n    }\n    else {\n        observable.reportChanges();\n    }\n    return toDisposable(() => {\n        observable.removeObserver(o);\n    });\n}\n_setRecomputeInitiallyAndOnChange(recomputeInitiallyAndOnChange);\nexport class KeepAliveObserver {\n    constructor(_forceRecompute, _handleValue) {\n        this._forceRecompute = _forceRecompute;\n        this._handleValue = _handleValue;\n        this._counter = 0;\n    }\n    beginUpdate(observable) {\n        this._counter++;\n    }\n    endUpdate(observable) {\n        this._counter--;\n        if (this._counter === 0 && this._forceRecompute) {\n            if (this._handleValue) {\n                this._handleValue(observable.get());\n            }\n            else {\n                observable.reportChanges();\n            }\n        }\n    }\n    handlePossibleChange(observable) {\n        // NO OP\n    }\n    handleChange(observable, change) {\n        // NO OP\n    }\n}\nexport function derivedObservableWithCache(owner, computeFn) {\n    let lastValue = undefined;\n    const observable = derivedOpts({ owner, debugReferenceFn: computeFn }, reader => {\n        lastValue = computeFn(reader, lastValue);\n        return lastValue;\n    });\n    return observable;\n}\nexport function derivedObservableWithWritableCache(owner, computeFn) {\n    let lastValue = undefined;\n    const onChange = observableSignal('derivedObservableWithWritableCache');\n    const observable = derived(owner, reader => {\n        onChange.read(reader);\n        lastValue = computeFn(reader, lastValue);\n        return lastValue;\n    });\n    return Object.assign(observable, {\n        clearCache: (tx) => {\n            lastValue = undefined;\n            onChange.trigger(tx);\n        },\n        setCache: (newValue, tx) => {\n            lastValue = newValue;\n            onChange.trigger(tx);\n        }\n    });\n}\n/**\n * When the items array changes, referential equal items are not mapped again.\n */\nexport function mapObservableArrayCached(owner, items, map, keySelector) {\n    let m = new ArrayMap(map, keySelector);\n    const self = derivedOpts({\n        debugReferenceFn: map,\n        owner,\n        onLastObserverRemoved: () => {\n            m.dispose();\n            m = new ArrayMap(map);\n        }\n    }, (reader) => {\n        m.setItems(items.read(reader));\n        return m.getItems();\n    });\n    return self;\n}\nclass ArrayMap {\n    constructor(_map, _keySelector) {\n        this._map = _map;\n        this._keySelector = _keySelector;\n        this._cache = new Map();\n        this._items = [];\n    }\n    dispose() {\n        this._cache.forEach(entry => entry.store.dispose());\n        this._cache.clear();\n    }\n    setItems(items) {\n        const newItems = [];\n        const itemsToRemove = new Set(this._cache.keys());\n        for (const item of items) {\n            const key = this._keySelector ? this._keySelector(item) : item;\n            let entry = this._cache.get(key);\n            if (!entry) {\n                const store = new DisposableStore();\n                const out = this._map(item, store);\n                entry = { out, store };\n                this._cache.set(key, entry);\n            }\n            else {\n                itemsToRemove.delete(key);\n            }\n            newItems.push(entry.out);\n        }\n        for (const item of itemsToRemove) {\n            const entry = this._cache.get(item);\n            entry.store.dispose();\n            this._cache.delete(item);\n        }\n        this._items = newItems;\n    }\n    getItems() {\n        return this._items;\n    }\n}\nexport class ValueWithChangeEventFromObservable {\n    constructor(observable) {\n        this.observable = observable;\n    }\n    get onDidChange() {\n        return Event.fromObservableLight(this.observable);\n    }\n    get value() {\n        return this.observable.get();\n    }\n}\nexport function observableFromValueWithChangeEvent(owner, value) {\n    if (value instanceof ValueWithChangeEventFromObservable) {\n        return value.observable;\n    }\n    return observableFromEvent(owner, value.onDidChange, () => value.value);\n}\n/**\n * Works like a derived.\n * However, if the value is not undefined, it is cached and will not be recomputed anymore.\n * In that case, the derived will unsubscribe from its dependencies.\n*/\nexport function derivedConstOnceDefined(owner, fn) {\n    return derivedObservableWithCache(owner, (reader, lastValue) => lastValue ?? fn(reader));\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nlet globalObservableLogger;\nexport function setLogger(logger) {\n    globalObservableLogger = logger;\n}\nexport function getLogger() {\n    return globalObservableLogger;\n}\nexport class ConsoleObservableLogger {\n    constructor() {\n        this.indentation = 0;\n        this.changedObservablesSets = new WeakMap();\n    }\n    textToConsoleArgs(text) {\n        return consoleTextToArgs([\n            normalText(repeat('|  ', this.indentation)),\n            text,\n        ]);\n    }\n    formatInfo(info) {\n        if (!info.hadValue) {\n            return [\n                normalText(` `),\n                styled(formatValue(info.newValue, 60), {\n                    color: 'green',\n                }),\n                normalText(` (initial)`),\n            ];\n        }\n        return info.didChange\n            ? [\n                normalText(` `),\n                styled(formatValue(info.oldValue, 70), {\n                    color: 'red',\n                    strikeThrough: true,\n                }),\n                normalText(` `),\n                styled(formatValue(info.newValue, 60), {\n                    color: 'green',\n                }),\n            ]\n            : [normalText(` (unchanged)`)];\n    }\n    handleObservableChanged(observable, info) {\n        console.log(...this.textToConsoleArgs([\n            formatKind('observable value changed'),\n            styled(observable.debugName, { color: 'BlueViolet' }),\n            ...this.formatInfo(info),\n        ]));\n    }\n    formatChanges(changes) {\n        if (changes.size === 0) {\n            return undefined;\n        }\n        return styled(' (changed deps: ' +\n            [...changes].map((o) => o.debugName).join(', ') +\n            ')', { color: 'gray' });\n    }\n    handleDerivedCreated(derived) {\n        const existingHandleChange = derived.handleChange;\n        this.changedObservablesSets.set(derived, new Set());\n        derived.handleChange = (observable, change) => {\n            this.changedObservablesSets.get(derived).add(observable);\n            return existingHandleChange.apply(derived, [observable, change]);\n        };\n    }\n    handleDerivedRecomputed(derived, info) {\n        const changedObservables = this.changedObservablesSets.get(derived);\n        console.log(...this.textToConsoleArgs([\n            formatKind('derived recomputed'),\n            styled(derived.debugName, { color: 'BlueViolet' }),\n            ...this.formatInfo(info),\n            this.formatChanges(changedObservables),\n            { data: [{ fn: derived._debugNameData.referenceFn ?? derived._computeFn }] }\n        ]));\n        changedObservables.clear();\n    }\n    handleFromEventObservableTriggered(observable, info) {\n        console.log(...this.textToConsoleArgs([\n            formatKind('observable from event triggered'),\n            styled(observable.debugName, { color: 'BlueViolet' }),\n            ...this.formatInfo(info),\n            { data: [{ fn: observable._getValue }] }\n        ]));\n    }\n    handleAutorunCreated(autorun) {\n        const existingHandleChange = autorun.handleChange;\n        this.changedObservablesSets.set(autorun, new Set());\n        autorun.handleChange = (observable, change) => {\n            this.changedObservablesSets.get(autorun).add(observable);\n            return existingHandleChange.apply(autorun, [observable, change]);\n        };\n    }\n    handleAutorunTriggered(autorun) {\n        const changedObservables = this.changedObservablesSets.get(autorun);\n        console.log(...this.textToConsoleArgs([\n            formatKind('autorun'),\n            styled(autorun.debugName, { color: 'BlueViolet' }),\n            this.formatChanges(changedObservables),\n            { data: [{ fn: autorun._debugNameData.referenceFn ?? autorun._runFn }] }\n        ]));\n        changedObservables.clear();\n        this.indentation++;\n    }\n    handleAutorunFinished(autorun) {\n        this.indentation--;\n    }\n    handleBeginTransaction(transaction) {\n        let transactionName = transaction.getDebugName();\n        if (transactionName === undefined) {\n            transactionName = '';\n        }\n        console.log(...this.textToConsoleArgs([\n            formatKind('transaction'),\n            styled(transactionName, { color: 'BlueViolet' }),\n            { data: [{ fn: transaction._fn }] }\n        ]));\n        this.indentation++;\n    }\n    handleEndTransaction() {\n        this.indentation--;\n    }\n}\nfunction consoleTextToArgs(text) {\n    const styles = new Array();\n    const data = [];\n    let firstArg = '';\n    function process(t) {\n        if ('length' in t) {\n            for (const item of t) {\n                if (item) {\n                    process(item);\n                }\n            }\n        }\n        else if ('text' in t) {\n            firstArg += `%c${t.text}`;\n            styles.push(t.style);\n            if (t.data) {\n                data.push(...t.data);\n            }\n        }\n        else if ('data' in t) {\n            data.push(...t.data);\n        }\n    }\n    process(text);\n    const result = [firstArg, ...styles];\n    result.push(...data);\n    return result;\n}\nfunction normalText(text) {\n    return styled(text, { color: 'black' });\n}\nfunction formatKind(kind) {\n    return styled(padStr(`${kind}: `, 10), { color: 'black', bold: true });\n}\nfunction styled(text, options = {\n    color: 'black',\n}) {\n    function objToCss(styleObj) {\n        return Object.entries(styleObj).reduce((styleString, [propName, propValue]) => {\n            return `${styleString}${propName}:${propValue};`;\n        }, '');\n    }\n    const style = {\n        color: options.color,\n    };\n    if (options.strikeThrough) {\n        style['text-decoration'] = 'line-through';\n    }\n    if (options.bold) {\n        style['font-weight'] = 'bold';\n    }\n    return {\n        text,\n        style: objToCss(style),\n    };\n}\nfunction formatValue(value, availableLen) {\n    switch (typeof value) {\n        case 'number':\n            return '' + value;\n        case 'string':\n            if (value.length + 2 <= availableLen) {\n                return `\"${value}\"`;\n            }\n            return `\"${value.substr(0, availableLen - 7)}\"+...`;\n        case 'boolean':\n            return value ? 'true' : 'false';\n        case 'undefined':\n            return 'undefined';\n        case 'object':\n            if (value === null) {\n                return 'null';\n            }\n            if (Array.isArray(value)) {\n                return formatArray(value, availableLen);\n            }\n            return formatObject(value, availableLen);\n        case 'symbol':\n            return value.toString();\n        case 'function':\n            return `[[Function${value.name ? ' ' + value.name : ''}]]`;\n        default:\n            return '' + value;\n    }\n}\nfunction formatArray(value, availableLen) {\n    let result = '[ ';\n    let first = true;\n    for (const val of value) {\n        if (!first) {\n            result += ', ';\n        }\n        if (result.length - 5 > availableLen) {\n            result += '...';\n            break;\n        }\n        first = false;\n        result += `${formatValue(val, availableLen - result.length)}`;\n    }\n    result += ' ]';\n    return result;\n}\nfunction formatObject(value, availableLen) {\n    let result = '{ ';\n    let first = true;\n    for (const [key, val] of Object.entries(value)) {\n        if (!first) {\n            result += ', ';\n        }\n        if (result.length - 5 > availableLen) {\n            result += '...';\n            break;\n        }\n        first = false;\n        result += `${key}: ${formatValue(val, availableLen - result.length)}`;\n    }\n    result += ' }';\n    return result;\n}\nfunction repeat(str, count) {\n    let result = '';\n    for (let i = 1; i <= count; i++) {\n        result += str;\n    }\n    return result;\n}\nfunction padStr(str, length) {\n    while (str.length < length) {\n        str += ' ';\n    }\n    return str;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { LanguagesRegistry } from './languagesRegistry.js';\nimport { firstOrDefault } from '../../../base/common/arrays.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { observableFromEvent } from '../../../base/common/observable.js';\nexport class LanguageService extends Disposable {\n    static { this.instanceCount = 0; }\n    constructor(warnOnOverwrite = false) {\n        super();\n        this._onDidRequestBasicLanguageFeatures = this._register(new Emitter());\n        this.onDidRequestBasicLanguageFeatures = this._onDidRequestBasicLanguageFeatures.event;\n        this._onDidRequestRichLanguageFeatures = this._register(new Emitter());\n        this.onDidRequestRichLanguageFeatures = this._onDidRequestRichLanguageFeatures.event;\n        this._onDidChange = this._register(new Emitter({ leakWarningThreshold: 200 /* https://github.com/microsoft/vscode/issues/119968 */ }));\n        this.onDidChange = this._onDidChange.event;\n        this._requestedBasicLanguages = new Set();\n        this._requestedRichLanguages = new Set();\n        LanguageService.instanceCount++;\n        this._registry = this._register(new LanguagesRegistry(true, warnOnOverwrite));\n        this.languageIdCodec = this._registry.languageIdCodec;\n        this._register(this._registry.onDidChange(() => this._onDidChange.fire()));\n    }\n    dispose() {\n        LanguageService.instanceCount--;\n        super.dispose();\n    }\n    isRegisteredLanguageId(languageId) {\n        return this._registry.isRegisteredLanguageId(languageId);\n    }\n    getLanguageIdByLanguageName(languageName) {\n        return this._registry.getLanguageIdByLanguageName(languageName);\n    }\n    getLanguageIdByMimeType(mimeType) {\n        return this._registry.getLanguageIdByMimeType(mimeType);\n    }\n    guessLanguageIdByFilepathOrFirstLine(resource, firstLine) {\n        const languageIds = this._registry.guessLanguageIdByFilepathOrFirstLine(resource, firstLine);\n        return firstOrDefault(languageIds, null);\n    }\n    createById(languageId) {\n        return new LanguageSelection(this.onDidChange, () => {\n            return this._createAndGetLanguageIdentifier(languageId);\n        });\n    }\n    createByFilepathOrFirstLine(resource, firstLine) {\n        return new LanguageSelection(this.onDidChange, () => {\n            const languageId = this.guessLanguageIdByFilepathOrFirstLine(resource, firstLine);\n            return this._createAndGetLanguageIdentifier(languageId);\n        });\n    }\n    _createAndGetLanguageIdentifier(languageId) {\n        if (!languageId || !this.isRegisteredLanguageId(languageId)) {\n            // Fall back to plain text if language is unknown\n            languageId = PLAINTEXT_LANGUAGE_ID;\n        }\n        return languageId;\n    }\n    requestBasicLanguageFeatures(languageId) {\n        if (!this._requestedBasicLanguages.has(languageId)) {\n            this._requestedBasicLanguages.add(languageId);\n            this._onDidRequestBasicLanguageFeatures.fire(languageId);\n        }\n    }\n    requestRichLanguageFeatures(languageId) {\n        if (!this._requestedRichLanguages.has(languageId)) {\n            this._requestedRichLanguages.add(languageId);\n            // Ensure basic features are requested\n            this.requestBasicLanguageFeatures(languageId);\n            // Ensure tokenizers are created\n            TokenizationRegistry.getOrCreate(languageId);\n            this._onDidRequestRichLanguageFeatures.fire(languageId);\n        }\n    }\n}\nclass LanguageSelection {\n    constructor(onDidChangeLanguages, selector) {\n        this._value = observableFromEvent(this, onDidChangeLanguages, () => selector());\n        this.onDidChange = Event.fromObservable(this._value);\n    }\n    get languageId() {\n        return this._value.get();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { parse } from '../../../base/common/glob.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { basename, posix } from '../../../base/common/path.js';\nimport { DataUri } from '../../../base/common/resources.js';\nimport { startsWithUTF8BOM } from '../../../base/common/strings.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nlet registeredAssociations = [];\nlet nonUserRegisteredAssociations = [];\nlet userRegisteredAssociations = [];\n/**\n * Associate a language to the registry (platform).\n * * **NOTE**: This association will lose over associations registered using `registerConfiguredLanguageAssociation`.\n * * **NOTE**: Use `clearPlatformLanguageAssociations` to remove all associations registered using this function.\n */\nexport function registerPlatformLanguageAssociation(association, warnOnOverwrite = false) {\n    _registerLanguageAssociation(association, false, warnOnOverwrite);\n}\nfunction _registerLanguageAssociation(association, userConfigured, warnOnOverwrite) {\n    // Register\n    const associationItem = toLanguageAssociationItem(association, userConfigured);\n    registeredAssociations.push(associationItem);\n    if (!associationItem.userConfigured) {\n        nonUserRegisteredAssociations.push(associationItem);\n    }\n    else {\n        userRegisteredAssociations.push(associationItem);\n    }\n    // Check for conflicts unless this is a user configured association\n    if (warnOnOverwrite && !associationItem.userConfigured) {\n        registeredAssociations.forEach(a => {\n            if (a.mime === associationItem.mime || a.userConfigured) {\n                return; // same mime or userConfigured is ok\n            }\n            if (associationItem.extension && a.extension === associationItem.extension) {\n                console.warn(`Overwriting extension <<${associationItem.extension}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.filename && a.filename === associationItem.filename) {\n                console.warn(`Overwriting filename <<${associationItem.filename}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.filepattern && a.filepattern === associationItem.filepattern) {\n                console.warn(`Overwriting filepattern <<${associationItem.filepattern}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.firstline && a.firstline === associationItem.firstline) {\n                console.warn(`Overwriting firstline <<${associationItem.firstline}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n        });\n    }\n}\nfunction toLanguageAssociationItem(association, userConfigured) {\n    return {\n        id: association.id,\n        mime: association.mime,\n        filename: association.filename,\n        extension: association.extension,\n        filepattern: association.filepattern,\n        firstline: association.firstline,\n        userConfigured: userConfigured,\n        filenameLowercase: association.filename ? association.filename.toLowerCase() : undefined,\n        extensionLowercase: association.extension ? association.extension.toLowerCase() : undefined,\n        filepatternLowercase: association.filepattern ? parse(association.filepattern.toLowerCase()) : undefined,\n        filepatternOnPath: association.filepattern ? association.filepattern.indexOf(posix.sep) >= 0 : false\n    };\n}\n/**\n * Clear language associations from the registry (platform).\n */\nexport function clearPlatformLanguageAssociations() {\n    registeredAssociations = registeredAssociations.filter(a => a.userConfigured);\n    nonUserRegisteredAssociations = [];\n}\n/**\n * @see `getMimeTypes`\n */\nexport function getLanguageIds(resource, firstLine) {\n    return getAssociations(resource, firstLine).map(item => item.id);\n}\nfunction getAssociations(resource, firstLine) {\n    let path;\n    if (resource) {\n        switch (resource.scheme) {\n            case Schemas.file:\n                path = resource.fsPath;\n                break;\n            case Schemas.data: {\n                const metadata = DataUri.parseMetaData(resource);\n                path = metadata.get(DataUri.META_DATA_LABEL);\n                break;\n            }\n            case Schemas.vscodeNotebookCell:\n                // File path not relevant for language detection of cell\n                path = undefined;\n                break;\n            default:\n                path = resource.path;\n        }\n    }\n    if (!path) {\n        return [{ id: 'unknown', mime: Mimes.unknown }];\n    }\n    path = path.toLowerCase();\n    const filename = basename(path);\n    // 1.) User configured mappings have highest priority\n    const configuredLanguage = getAssociationByPath(path, filename, userRegisteredAssociations);\n    if (configuredLanguage) {\n        return [configuredLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n    }\n    // 2.) Registered mappings have middle priority\n    const registeredLanguage = getAssociationByPath(path, filename, nonUserRegisteredAssociations);\n    if (registeredLanguage) {\n        return [registeredLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n    }\n    // 3.) Firstline has lowest priority\n    if (firstLine) {\n        const firstlineLanguage = getAssociationByFirstline(firstLine);\n        if (firstlineLanguage) {\n            return [firstlineLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n        }\n    }\n    return [{ id: 'unknown', mime: Mimes.unknown }];\n}\nfunction getAssociationByPath(path, filename, associations) {\n    let filenameMatch = undefined;\n    let patternMatch = undefined;\n    let extensionMatch = undefined;\n    // We want to prioritize associations based on the order they are registered so that the last registered\n    // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n    for (let i = associations.length - 1; i >= 0; i--) {\n        const association = associations[i];\n        // First exact name match\n        if (filename === association.filenameLowercase) {\n            filenameMatch = association;\n            break; // take it!\n        }\n        // Longest pattern match\n        if (association.filepattern) {\n            if (!patternMatch || association.filepattern.length > patternMatch.filepattern.length) {\n                const target = association.filepatternOnPath ? path : filename; // match on full path if pattern contains path separator\n                if (association.filepatternLowercase?.(target)) {\n                    patternMatch = association;\n                }\n            }\n        }\n        // Longest extension match\n        if (association.extension) {\n            if (!extensionMatch || association.extension.length > extensionMatch.extension.length) {\n                if (filename.endsWith(association.extensionLowercase)) {\n                    extensionMatch = association;\n                }\n            }\n        }\n    }\n    // 1.) Exact name match has second highest priority\n    if (filenameMatch) {\n        return filenameMatch;\n    }\n    // 2.) Match on pattern\n    if (patternMatch) {\n        return patternMatch;\n    }\n    // 3.) Match on extension comes next\n    if (extensionMatch) {\n        return extensionMatch;\n    }\n    return undefined;\n}\nfunction getAssociationByFirstline(firstLine) {\n    if (startsWithUTF8BOM(firstLine)) {\n        firstLine = firstLine.substr(1);\n    }\n    if (firstLine.length > 0) {\n        // We want to prioritize associations based on the order they are registered so that the last registered\n        // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n        for (let i = registeredAssociations.length - 1; i >= 0; i--) {\n            const association = registeredAssociations[i];\n            if (!association.firstline) {\n                continue;\n            }\n            const matches = firstLine.match(association.firstline);\n            if (matches && matches.length > 0) {\n                return association;\n            }\n        }\n    }\n    return undefined;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { regExpLeadsToEndlessLoop } from '../../../base/common/strings.js';\nimport { clearPlatformLanguageAssociations, getLanguageIds, registerPlatformLanguageAssociation } from './languagesAssociations.js';\nimport { ModesRegistry, PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nconst NULL_LANGUAGE_ID = 'vs.editor.nullLanguage';\nexport class LanguageIdCodec {\n    constructor() {\n        this._languageIdToLanguage = [];\n        this._languageToLanguageId = new Map();\n        this._register(NULL_LANGUAGE_ID, 0 /* LanguageId.Null */);\n        this._register(PLAINTEXT_LANGUAGE_ID, 1 /* LanguageId.PlainText */);\n        this._nextLanguageId = 2;\n    }\n    _register(language, languageId) {\n        this._languageIdToLanguage[languageId] = language;\n        this._languageToLanguageId.set(language, languageId);\n    }\n    register(language) {\n        if (this._languageToLanguageId.has(language)) {\n            return;\n        }\n        const languageId = this._nextLanguageId++;\n        this._register(language, languageId);\n    }\n    encodeLanguageId(languageId) {\n        return this._languageToLanguageId.get(languageId) || 0 /* LanguageId.Null */;\n    }\n    decodeLanguageId(languageId) {\n        return this._languageIdToLanguage[languageId] || NULL_LANGUAGE_ID;\n    }\n}\nexport class LanguagesRegistry extends Disposable {\n    static { this.instanceCount = 0; }\n    constructor(useModesRegistry = true, warnOnOverwrite = false) {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        LanguagesRegistry.instanceCount++;\n        this._warnOnOverwrite = warnOnOverwrite;\n        this.languageIdCodec = new LanguageIdCodec();\n        this._dynamicLanguages = [];\n        this._languages = {};\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        if (useModesRegistry) {\n            this._initializeFromRegistry();\n            this._register(ModesRegistry.onDidChangeLanguages((m) => {\n                this._initializeFromRegistry();\n            }));\n        }\n    }\n    dispose() {\n        LanguagesRegistry.instanceCount--;\n        super.dispose();\n    }\n    _initializeFromRegistry() {\n        this._languages = {};\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        clearPlatformLanguageAssociations();\n        const desc = [].concat(ModesRegistry.getLanguages()).concat(this._dynamicLanguages);\n        this._registerLanguages(desc);\n    }\n    _registerLanguages(desc) {\n        for (const d of desc) {\n            this._registerLanguage(d);\n        }\n        // Rebuild fast path maps\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        Object.keys(this._languages).forEach((langId) => {\n            const language = this._languages[langId];\n            if (language.name) {\n                this._nameMap[language.name] = language.identifier;\n            }\n            language.aliases.forEach((alias) => {\n                this._lowercaseNameMap[alias.toLowerCase()] = language.identifier;\n            });\n            language.mimetypes.forEach((mimetype) => {\n                this._mimeTypesMap[mimetype] = language.identifier;\n            });\n        });\n        Registry.as(Extensions.Configuration).registerOverrideIdentifiers(this.getRegisteredLanguageIds());\n        this._onDidChange.fire();\n    }\n    _registerLanguage(lang) {\n        const langId = lang.id;\n        let resolvedLanguage;\n        if (hasOwnProperty.call(this._languages, langId)) {\n            resolvedLanguage = this._languages[langId];\n        }\n        else {\n            this.languageIdCodec.register(langId);\n            resolvedLanguage = {\n                identifier: langId,\n                name: null,\n                mimetypes: [],\n                aliases: [],\n                extensions: [],\n                filenames: [],\n                configurationFiles: [],\n                icons: []\n            };\n            this._languages[langId] = resolvedLanguage;\n        }\n        this._mergeLanguage(resolvedLanguage, lang);\n    }\n    _mergeLanguage(resolvedLanguage, lang) {\n        const langId = lang.id;\n        let primaryMime = null;\n        if (Array.isArray(lang.mimetypes) && lang.mimetypes.length > 0) {\n            resolvedLanguage.mimetypes.push(...lang.mimetypes);\n            primaryMime = lang.mimetypes[0];\n        }\n        if (!primaryMime) {\n            primaryMime = `text/x-${langId}`;\n            resolvedLanguage.mimetypes.push(primaryMime);\n        }\n        if (Array.isArray(lang.extensions)) {\n            if (lang.configuration) {\n                // insert first as this appears to be the 'primary' language definition\n                resolvedLanguage.extensions = lang.extensions.concat(resolvedLanguage.extensions);\n            }\n            else {\n                resolvedLanguage.extensions = resolvedLanguage.extensions.concat(lang.extensions);\n            }\n            for (const extension of lang.extensions) {\n                registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, extension: extension }, this._warnOnOverwrite);\n            }\n        }\n        if (Array.isArray(lang.filenames)) {\n            for (const filename of lang.filenames) {\n                registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, filename: filename }, this._warnOnOverwrite);\n                resolvedLanguage.filenames.push(filename);\n            }\n        }\n        if (Array.isArray(lang.filenamePatterns)) {\n            for (const filenamePattern of lang.filenamePatterns) {\n                registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, filepattern: filenamePattern }, this._warnOnOverwrite);\n            }\n        }\n        if (typeof lang.firstLine === 'string' && lang.firstLine.length > 0) {\n            let firstLineRegexStr = lang.firstLine;\n            if (firstLineRegexStr.charAt(0) !== '^') {\n                firstLineRegexStr = '^' + firstLineRegexStr;\n            }\n            try {\n                const firstLineRegex = new RegExp(firstLineRegexStr);\n                if (!regExpLeadsToEndlessLoop(firstLineRegex)) {\n                    registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, firstline: firstLineRegex }, this._warnOnOverwrite);\n                }\n            }\n            catch (err) {\n                // Most likely, the regex was bad\n                console.warn(`[${lang.id}]: Invalid regular expression \\`${firstLineRegexStr}\\`: `, err);\n            }\n        }\n        resolvedLanguage.aliases.push(langId);\n        let langAliases = null;\n        if (typeof lang.aliases !== 'undefined' && Array.isArray(lang.aliases)) {\n            if (lang.aliases.length === 0) {\n                // signal that this language should not get a name\n                langAliases = [null];\n            }\n            else {\n                langAliases = lang.aliases;\n            }\n        }\n        if (langAliases !== null) {\n            for (const langAlias of langAliases) {\n                if (!langAlias || langAlias.length === 0) {\n                    continue;\n                }\n                resolvedLanguage.aliases.push(langAlias);\n            }\n        }\n        const containsAliases = (langAliases !== null && langAliases.length > 0);\n        if (containsAliases && langAliases[0] === null) {\n            // signal that this language should not get a name\n        }\n        else {\n            const bestName = (containsAliases ? langAliases[0] : null) || langId;\n            if (containsAliases || !resolvedLanguage.name) {\n                resolvedLanguage.name = bestName;\n            }\n        }\n        if (lang.configuration) {\n            resolvedLanguage.configurationFiles.push(lang.configuration);\n        }\n        if (lang.icon) {\n            resolvedLanguage.icons.push(lang.icon);\n        }\n    }\n    isRegisteredLanguageId(languageId) {\n        if (!languageId) {\n            return false;\n        }\n        return hasOwnProperty.call(this._languages, languageId);\n    }\n    getRegisteredLanguageIds() {\n        return Object.keys(this._languages);\n    }\n    getLanguageIdByLanguageName(languageName) {\n        const languageNameLower = languageName.toLowerCase();\n        if (!hasOwnProperty.call(this._lowercaseNameMap, languageNameLower)) {\n            return null;\n        }\n        return this._lowercaseNameMap[languageNameLower];\n    }\n    getLanguageIdByMimeType(mimeType) {\n        if (!mimeType) {\n            return null;\n        }\n        if (hasOwnProperty.call(this._mimeTypesMap, mimeType)) {\n            return this._mimeTypesMap[mimeType];\n        }\n        return null;\n    }\n    guessLanguageIdByFilepathOrFirstLine(resource, firstLine) {\n        if (!resource && !firstLine) {\n            return [];\n        }\n        return getLanguageIds(resource, firstLine);\n    }\n}\n"],"names":["constObservable","value","ConstObservable","constructor","super","this","debugName","toString","get","addObserver","observer","removeObserver","observableFromEvent","args","owner","event","getValue","length","FromEventObservable","undefined","globalTransaction","observableFromEventOpts","options","debugReferenceFn","equalsFn","_debugNameData","_getValue","_getTransaction","_equalityComparator","hasValue","handleEvent","newValue","oldValue","didChange","didRunTransaction","tx","handleFromEventObservableTriggered","change","hadValue","o","observers","updateObserver","handleChange","name","getDebugName","onFirstObserverAdded","subscription","onLastObserverRemoved","dispose","observableSignalFromEvent","FromEventObservableSignal","Observer","batchEventsGlobally","fn","didSet","observableSignal","debugNameOrOwner","ObservableSignal","_owner","_debugName","trigger","recomputeInitiallyAndOnChange","observable","handleValue","KeepAliveObserver","reportChanges","_forceRecompute","_handleValue","_counter","beginUpdate","endUpdate","handlePossibleChange","derivedObservableWithCache","computeFn","lastValue","reader","mapObservableArrayCached","items","map","keySelector","m","ArrayMap","setItems","read","getItems","_map","_keySelector","_cache","Map","_items","forEach","entry","store","clear","newItems","itemsToRemove","Set","keys","item","key","delete","out","set","push","derivedConstOnceDefined","globalObservableLogger","setLogger","logger","getLogger","ConsoleObservableLogger","indentation","changedObservablesSets","WeakMap","textToConsoleArgs","text","styles","Array","data","firstArg","process","t","style","result","consoleTextToArgs","normalText","repeat","formatInfo","info","styled","formatValue","color","strikeThrough","handleObservableChanged","console","log","formatKind","formatChanges","changes","size","join","handleDerivedCreated","derived","existingHandleChange","add","apply","handleDerivedRecomputed","changedObservables","referenceFn","_computeFn","handleAutorunCreated","autorun","handleAutorunTriggered","_runFn","handleAutorunFinished","handleBeginTransaction","transaction","transactionName","_fn","handleEndTransaction","kind","str","padStr","bold","styleObj","Object","entries","reduce","styleString","propName","propValue","availableLen","substr","isArray","first","val","formatArray","formatObject","count","i","LanguageService","instanceCount","warnOnOverwrite","_onDidRequestBasicLanguageFeatures","_register","onDidRequestBasicLanguageFeatures","_onDidRequestRichLanguageFeatures","onDidRequestRichLanguageFeatures","_onDidChange","leakWarningThreshold","onDidChange","_requestedBasicLanguages","_requestedRichLanguages","_registry","LanguagesRegistry","languageIdCodec","fire","isRegisteredLanguageId","languageId","getLanguageIdByLanguageName","languageName","getLanguageIdByMimeType","mimeType","guessLanguageIdByFilepathOrFirstLine","resource","firstLine","languageIds","createById","LanguageSelection","_createAndGetLanguageIdentifier","createByFilepathOrFirstLine","requestBasicLanguageFeatures","has","requestRichLanguageFeatures","getOrCreate","onDidChangeLanguages","selector","_value","fromObservable","registeredAssociations","nonUserRegisteredAssociations","userRegisteredAssociations","registerPlatformLanguageAssociation","association","userConfigured","associationItem","id","mime","filename","extension","filepattern","firstline","filenameLowercase","toLowerCase","extensionLowercase","filepatternLowercase","filepatternOnPath","indexOf","sep","toLanguageAssociationItem","a","warn","_registerLanguageAssociation","clearPlatformLanguageAssociations","filter","getLanguageIds","path","scheme","file","fsPath","parseMetaData","META_DATA_LABEL","vscodeNotebookCell","unknown","configuredLanguage","getAssociationByPath","registeredLanguage","firstlineLanguage","matches","match","getAssociationByFirstline","getAssociations","associations","filenameMatch","patternMatch","extensionMatch","target","endsWith","hasOwnProperty","prototype","NULL_LANGUAGE_ID","LanguageIdCodec","_languageIdToLanguage","_languageToLanguageId","_nextLanguageId","language","register","encodeLanguageId","decodeLanguageId","useModesRegistry","_warnOnOverwrite","_dynamicLanguages","_languages","_mimeTypesMap","_nameMap","_lowercaseNameMap","_initializeFromRegistry","desc","concat","getLanguages","_registerLanguages","d","_registerLanguage","langId","identifier","aliases","alias","mimetypes","mimetype","as","Configuration","registerOverrideIdentifiers","getRegisteredLanguageIds","lang","resolvedLanguage","call","extensions","filenames","configurationFiles","icons","_mergeLanguage","primaryMime","configuration","filenamePatterns","filenamePattern","firstLineRegexStr","charAt","firstLineRegex","RegExp","err","langAliases","langAlias","containsAliases","bestName","icon","languageNameLower"],"sourceRoot":""}