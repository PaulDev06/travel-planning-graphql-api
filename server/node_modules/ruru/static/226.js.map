{"version":3,"file":"226.js","mappings":"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","sources":["webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/listColors.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/theme/common/theme.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/miscColors.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/inputColors.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/menuColors.js","webpack://ruru/../../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/quickpickColors.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color } from '../../../../base/common/color.js';\nimport { registerColor, darken, lighten, transparent, ifDefinedThenElse } from '../colorUtils.js';\n// Import the colors we need\nimport { foreground, contrastBorder, activeContrastBorder, focusBorder, iconForeground } from './baseColors.js';\nimport { editorWidgetBackground, editorFindMatchHighlightBorder, editorFindMatchHighlight, widgetShadow, editorWidgetForeground } from './editorColors.js';\nexport const listFocusBackground = registerColor('list.focusBackground', null, nls.localize('listFocusBackground', \"List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusForeground = registerColor('list.focusForeground', null, nls.localize('listFocusForeground', \"List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusOutline = registerColor('list.focusOutline', { dark: focusBorder, light: focusBorder, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('listFocusOutline', \"List/Tree outline color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusAndSelectionOutline = registerColor('list.focusAndSelectionOutline', null, nls.localize('listFocusAndSelectionOutline', \"List/Tree outline color for the focused item when the list/tree is active and selected. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionBackground = registerColor('list.activeSelectionBackground', { dark: '#04395E', light: '#0060C0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listActiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionForeground = registerColor('list.activeSelectionForeground', { dark: Color.white, light: Color.white, hcDark: null, hcLight: null }, nls.localize('listActiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionIconForeground = registerColor('list.activeSelectionIconForeground', null, nls.localize('listActiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground', { dark: '#37373D', light: '#E4E6F1', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listInactiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground', null, nls.localize('listInactiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionIconForeground = registerColor('list.inactiveSelectionIconForeground', null, nls.localize('listInactiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusBackground = registerColor('list.inactiveFocusBackground', null, nls.localize('listInactiveFocusBackground', \"List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusOutline = registerColor('list.inactiveFocusOutline', null, nls.localize('listInactiveFocusOutline', \"List/Tree outline color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listHoverBackground = registerColor('list.hoverBackground', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: Color.white.transparent(0.1), hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listHoverBackground', \"List/Tree background when hovering over items using the mouse.\"));\nexport const listHoverForeground = registerColor('list.hoverForeground', null, nls.localize('listHoverForeground', \"List/Tree foreground when hovering over items using the mouse.\"));\nexport const listDropOverBackground = registerColor('list.dropBackground', { dark: '#062F4A', light: '#D6EBFF', hcDark: null, hcLight: null }, nls.localize('listDropBackground', \"List/Tree drag and drop background when moving items over other items when using the mouse.\"));\nexport const listDropBetweenBackground = registerColor('list.dropBetweenBackground', { dark: iconForeground, light: iconForeground, hcDark: null, hcLight: null }, nls.localize('listDropBetweenBackground', \"List/Tree drag and drop border color when moving items between items when using the mouse.\"));\nexport const listHighlightForeground = registerColor('list.highlightForeground', { dark: '#2AAAFF', light: '#0066BF', hcDark: focusBorder, hcLight: focusBorder }, nls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));\nexport const listFocusHighlightForeground = registerColor('list.focusHighlightForeground', { dark: listHighlightForeground, light: ifDefinedThenElse(listActiveSelectionBackground, listHighlightForeground, '#BBE7FF'), hcDark: listHighlightForeground, hcLight: listHighlightForeground }, nls.localize('listFocusHighlightForeground', 'List/Tree foreground color of the match highlights on actively focused items when searching inside the list/tree.'));\nexport const listInvalidItemForeground = registerColor('list.invalidItemForeground', { dark: '#B89500', light: '#B89500', hcDark: '#B89500', hcLight: '#B5200D' }, nls.localize('invalidItemForeground', 'List/Tree foreground color for invalid items, for example an unresolved root in explorer.'));\nexport const listErrorForeground = registerColor('list.errorForeground', { dark: '#F88070', light: '#B01011', hcDark: null, hcLight: null }, nls.localize('listErrorForeground', 'Foreground color of list items containing errors.'));\nexport const listWarningForeground = registerColor('list.warningForeground', { dark: '#CCA700', light: '#855F00', hcDark: null, hcLight: null }, nls.localize('listWarningForeground', 'Foreground color of list items containing warnings.'));\nexport const listFilterWidgetBackground = registerColor('listFilterWidget.background', { light: darken(editorWidgetBackground, 0), dark: lighten(editorWidgetBackground, 0), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetOutline = registerColor('listFilterWidget.outline', { dark: Color.transparent, light: Color.transparent, hcDark: '#f38518', hcLight: '#007ACC' }, nls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline', { dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));\nexport const listFilterWidgetShadow = registerColor('listFilterWidget.shadow', widgetShadow, nls.localize('listFilterWidgetShadow', 'Shadow color of the type filter widget in lists and trees.'));\nexport const listFilterMatchHighlight = registerColor('list.filterMatchBackground', { dark: editorFindMatchHighlight, light: editorFindMatchHighlight, hcDark: null, hcLight: null }, nls.localize('listFilterMatchHighlight', 'Background color of the filtered match.'));\nexport const listFilterMatchHighlightBorder = registerColor('list.filterMatchBorder', { dark: editorFindMatchHighlightBorder, light: editorFindMatchHighlightBorder, hcDark: contrastBorder, hcLight: activeContrastBorder }, nls.localize('listFilterMatchHighlightBorder', 'Border color of the filtered match.'));\nexport const listDeemphasizedForeground = registerColor('list.deemphasizedForeground', { dark: '#8C8C8C', light: '#8E8E90', hcDark: '#A7A8A9', hcLight: '#666666' }, nls.localize('listDeemphasizedForeground', \"List/Tree foreground color for items that are deemphasized.\"));\n// ------ tree\nexport const treeIndentGuidesStroke = registerColor('tree.indentGuidesStroke', { dark: '#585858', light: '#a9a9a9', hcDark: '#a9a9a9', hcLight: '#a5a5a5' }, nls.localize('treeIndentGuidesStroke', \"Tree stroke color for the indentation guides.\"));\nexport const treeInactiveIndentGuidesStroke = registerColor('tree.inactiveIndentGuidesStroke', transparent(treeIndentGuidesStroke, 0.4), nls.localize('treeInactiveIndentGuidesStroke', \"Tree stroke color for the indentation guides that are not active.\"));\n// ------ table\nexport const tableColumnsBorder = registerColor('tree.tableColumnsBorder', { dark: '#CCCCCC20', light: '#61616120', hcDark: null, hcLight: null }, nls.localize('tableColumnsBorder', \"Table border color between columns.\"));\nexport const tableOddRowsBackgroundColor = registerColor('tree.tableOddRowsBackground', { dark: transparent(foreground, 0.04), light: transparent(foreground, 0.04), hcDark: null, hcLight: null }, nls.localize('tableOddRowsBackgroundColor', \"Background color for odd table rows.\"));\n// ------ action list\nexport const editorActionListBackground = registerColor('editorActionList.background', editorWidgetBackground, nls.localize('editorActionListBackground', \"Action List background color.\"));\nexport const editorActionListForeground = registerColor('editorActionList.foreground', editorWidgetForeground, nls.localize('editorActionListForeground', \"Action List foreground color.\"));\nexport const editorActionListFocusForeground = registerColor('editorActionList.focusForeground', listActiveSelectionForeground, nls.localize('editorActionListFocusForeground', \"Action List foreground color for the focused item.\"));\nexport const editorActionListFocusBackground = registerColor('editorActionList.focusBackground', listActiveSelectionBackground, nls.localize('editorActionListFocusBackground', \"Action List background color for the focused item.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Color scheme used by the OS and by color themes.\n */\nexport var ColorScheme;\n(function (ColorScheme) {\n    ColorScheme[\"DARK\"] = \"dark\";\n    ColorScheme[\"LIGHT\"] = \"light\";\n    ColorScheme[\"HIGH_CONTRAST_DARK\"] = \"hcDark\";\n    ColorScheme[\"HIGH_CONTRAST_LIGHT\"] = \"hcLight\";\n})(ColorScheme || (ColorScheme = {}));\nexport function isHighContrast(scheme) {\n    return scheme === ColorScheme.HIGH_CONTRAST_DARK || scheme === ColorScheme.HIGH_CONTRAST_LIGHT;\n}\nexport function isDark(scheme) {\n    return scheme === ColorScheme.DARK || scheme === ColorScheme.HIGH_CONTRAST_DARK;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color } from '../../../../base/common/color.js';\nimport { registerColor, transparent } from '../colorUtils.js';\n// Import the colors we need\nimport { contrastBorder, focusBorder } from './baseColors.js';\n// ----- sash\nexport const sashHoverBorder = registerColor('sash.hoverBorder', focusBorder, nls.localize('sashActiveBorder', \"Border color of active sashes.\"));\n// ----- badge\nexport const badgeBackground = registerColor('badge.background', { dark: '#4D4D4D', light: '#C4C4C4', hcDark: Color.black, hcLight: '#0F4A85' }, nls.localize('badgeBackground', \"Badge background color. Badges are small information labels, e.g. for search results count.\"));\nexport const badgeForeground = registerColor('badge.foreground', { dark: Color.white, light: '#333', hcDark: Color.white, hcLight: Color.white }, nls.localize('badgeForeground', \"Badge foreground color. Badges are small information labels, e.g. for search results count.\"));\n// ----- scrollbar\nexport const scrollbarShadow = registerColor('scrollbar.shadow', { dark: '#000000', light: '#DDDDDD', hcDark: null, hcLight: null }, nls.localize('scrollbarShadow', \"Scrollbar shadow to indicate that the view is scrolled.\"));\nexport const scrollbarSliderBackground = registerColor('scrollbarSlider.background', { dark: Color.fromHex('#797979').transparent(0.4), light: Color.fromHex('#646464').transparent(0.4), hcDark: transparent(contrastBorder, 0.6), hcLight: transparent(contrastBorder, 0.4) }, nls.localize('scrollbarSliderBackground', \"Scrollbar slider background color.\"));\nexport const scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', { dark: Color.fromHex('#646464').transparent(0.7), light: Color.fromHex('#646464').transparent(0.7), hcDark: transparent(contrastBorder, 0.8), hcLight: transparent(contrastBorder, 0.8) }, nls.localize('scrollbarSliderHoverBackground', \"Scrollbar slider background color when hovering.\"));\nexport const scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', { dark: Color.fromHex('#BFBFBF').transparent(0.4), light: Color.fromHex('#000000').transparent(0.6), hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('scrollbarSliderActiveBackground', \"Scrollbar slider background color when clicked on.\"));\n// ----- progress bar\nexport const progressBarBackground = registerColor('progressBar.background', { dark: Color.fromHex('#0E70C0'), light: Color.fromHex('#0E70C0'), hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('progressBarBackground', \"Background color of the progress bar that can show for long running operations.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { registerColor, transparent, lighten, darken } from '../colorUtils.js';\n// Import the colors we need\nimport { foreground, contrastBorder, focusBorder, iconForeground } from './baseColors.js';\nimport { editorWidgetBackground } from './editorColors.js';\n// ----- input\nexport const inputBackground = registerColor('input.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, nls.localize('inputBoxBackground', \"Input box background.\"));\nexport const inputForeground = registerColor('input.foreground', foreground, nls.localize('inputBoxForeground', \"Input box foreground.\"));\nexport const inputBorder = registerColor('input.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputBoxBorder', \"Input box border.\"));\nexport const inputActiveOptionBorder = registerColor('inputOption.activeBorder', { dark: '#007ACC', light: '#007ACC', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputBoxActiveOptionBorder', \"Border color of activated options in input fields.\"));\nexport const inputActiveOptionHoverBackground = registerColor('inputOption.hoverBackground', { dark: '#5a5d5e80', light: '#b8b8b850', hcDark: null, hcLight: null }, nls.localize('inputOption.hoverBackground', \"Background color of activated options in input fields.\"));\nexport const inputActiveOptionBackground = registerColor('inputOption.activeBackground', { dark: transparent(focusBorder, 0.4), light: transparent(focusBorder, 0.2), hcDark: Color.transparent, hcLight: Color.transparent }, nls.localize('inputOption.activeBackground', \"Background hover color of options in input fields.\"));\nexport const inputActiveOptionForeground = registerColor('inputOption.activeForeground', { dark: Color.white, light: Color.black, hcDark: foreground, hcLight: foreground }, nls.localize('inputOption.activeForeground', \"Foreground color of activated options in input fields.\"));\nexport const inputPlaceholderForeground = registerColor('input.placeholderForeground', { light: transparent(foreground, 0.5), dark: transparent(foreground, 0.5), hcDark: transparent(foreground, 0.7), hcLight: transparent(foreground, 0.7) }, nls.localize('inputPlaceholderForeground', \"Input box foreground color for placeholder text.\"));\n// ----- input validation\nexport const inputValidationInfoBackground = registerColor('inputValidation.infoBackground', { dark: '#063B49', light: '#D6ECF2', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationInfoBackground', \"Input validation background color for information severity.\"));\nexport const inputValidationInfoForeground = registerColor('inputValidation.infoForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationInfoForeground', \"Input validation foreground color for information severity.\"));\nexport const inputValidationInfoBorder = registerColor('inputValidation.infoBorder', { dark: '#007acc', light: '#007acc', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationInfoBorder', \"Input validation border color for information severity.\"));\nexport const inputValidationWarningBackground = registerColor('inputValidation.warningBackground', { dark: '#352A05', light: '#F6F5D2', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationWarningBackground', \"Input validation background color for warning severity.\"));\nexport const inputValidationWarningForeground = registerColor('inputValidation.warningForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationWarningForeground', \"Input validation foreground color for warning severity.\"));\nexport const inputValidationWarningBorder = registerColor('inputValidation.warningBorder', { dark: '#B89500', light: '#B89500', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationWarningBorder', \"Input validation border color for warning severity.\"));\nexport const inputValidationErrorBackground = registerColor('inputValidation.errorBackground', { dark: '#5A1D1D', light: '#F2DEDE', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationErrorBackground', \"Input validation background color for error severity.\"));\nexport const inputValidationErrorForeground = registerColor('inputValidation.errorForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationErrorForeground', \"Input validation foreground color for error severity.\"));\nexport const inputValidationErrorBorder = registerColor('inputValidation.errorBorder', { dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationErrorBorder', \"Input validation border color for error severity.\"));\n// ----- select\nexport const selectBackground = registerColor('dropdown.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, nls.localize('dropdownBackground', \"Dropdown background.\"));\nexport const selectListBackground = registerColor('dropdown.listBackground', { dark: null, light: null, hcDark: Color.black, hcLight: Color.white }, nls.localize('dropdownListBackground', \"Dropdown list background.\"));\nexport const selectForeground = registerColor('dropdown.foreground', { dark: '#F0F0F0', light: foreground, hcDark: Color.white, hcLight: foreground }, nls.localize('dropdownForeground', \"Dropdown foreground.\"));\nexport const selectBorder = registerColor('dropdown.border', { dark: selectBackground, light: '#CECECE', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('dropdownBorder', \"Dropdown border.\"));\n// ------ button\nexport const buttonForeground = registerColor('button.foreground', Color.white, nls.localize('buttonForeground', \"Button foreground color.\"));\nexport const buttonSeparator = registerColor('button.separator', transparent(buttonForeground, .4), nls.localize('buttonSeparator', \"Button separator color.\"));\nexport const buttonBackground = registerColor('button.background', { dark: '#0E639C', light: '#007ACC', hcDark: null, hcLight: '#0F4A85' }, nls.localize('buttonBackground', \"Button background color.\"));\nexport const buttonHoverBackground = registerColor('button.hoverBackground', { dark: lighten(buttonBackground, 0.2), light: darken(buttonBackground, 0.2), hcDark: buttonBackground, hcLight: buttonBackground }, nls.localize('buttonHoverBackground', \"Button background color when hovering.\"));\nexport const buttonBorder = registerColor('button.border', contrastBorder, nls.localize('buttonBorder', \"Button border color.\"));\nexport const buttonSecondaryForeground = registerColor('button.secondaryForeground', { dark: Color.white, light: Color.white, hcDark: Color.white, hcLight: foreground }, nls.localize('buttonSecondaryForeground', \"Secondary button foreground color.\"));\nexport const buttonSecondaryBackground = registerColor('button.secondaryBackground', { dark: '#3A3D41', light: '#5F6A79', hcDark: null, hcLight: Color.white }, nls.localize('buttonSecondaryBackground', \"Secondary button background color.\"));\nexport const buttonSecondaryHoverBackground = registerColor('button.secondaryHoverBackground', { dark: lighten(buttonSecondaryBackground, 0.2), light: darken(buttonSecondaryBackground, 0.2), hcDark: null, hcLight: null }, nls.localize('buttonSecondaryHoverBackground', \"Secondary button background color when hovering.\"));\n// ------ radio\nexport const radioActiveForeground = registerColor('radio.activeForeground', inputActiveOptionForeground, nls.localize('radioActiveForeground', \"Foreground color of active radio option.\"));\nexport const radioActiveBackground = registerColor('radio.activeBackground', inputActiveOptionBackground, nls.localize('radioBackground', \"Background color of active radio option.\"));\nexport const radioActiveBorder = registerColor('radio.activeBorder', inputActiveOptionBorder, nls.localize('radioActiveBorder', \"Border color of the active radio option.\"));\nexport const radioInactiveForeground = registerColor('radio.inactiveForeground', null, nls.localize('radioInactiveForeground', \"Foreground color of inactive radio option.\"));\nexport const radioInactiveBackground = registerColor('radio.inactiveBackground', null, nls.localize('radioInactiveBackground', \"Background color of inactive radio option.\"));\nexport const radioInactiveBorder = registerColor('radio.inactiveBorder', { light: transparent(radioActiveForeground, .2), dark: transparent(radioActiveForeground, .2), hcDark: transparent(radioActiveForeground, .4), hcLight: transparent(radioActiveForeground, .2) }, nls.localize('radioInactiveBorder', \"Border color of the inactive radio option.\"));\nexport const radioInactiveHoverBackground = registerColor('radio.inactiveHoverBackground', inputActiveOptionHoverBackground, nls.localize('radioHoverBackground', \"Background color of inactive active radio option when hovering.\"));\n// ------ checkbox\nexport const checkboxBackground = registerColor('checkbox.background', selectBackground, nls.localize('checkbox.background', \"Background color of checkbox widget.\"));\nexport const checkboxSelectBackground = registerColor('checkbox.selectBackground', editorWidgetBackground, nls.localize('checkbox.select.background', \"Background color of checkbox widget when the element it's in is selected.\"));\nexport const checkboxForeground = registerColor('checkbox.foreground', selectForeground, nls.localize('checkbox.foreground', \"Foreground color of checkbox widget.\"));\nexport const checkboxBorder = registerColor('checkbox.border', selectBorder, nls.localize('checkbox.border', \"Border color of checkbox widget.\"));\nexport const checkboxSelectBorder = registerColor('checkbox.selectBorder', iconForeground, nls.localize('checkbox.select.border', \"Border color of checkbox widget when the element it's in is selected.\"));\n// ------ keybinding label\nexport const keybindingLabelBackground = registerColor('keybindingLabel.background', { dark: new Color(new RGBA(128, 128, 128, 0.17)), light: new Color(new RGBA(221, 221, 221, 0.4)), hcDark: Color.transparent, hcLight: Color.transparent }, nls.localize('keybindingLabelBackground', \"Keybinding label background color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelForeground = registerColor('keybindingLabel.foreground', { dark: Color.fromHex('#CCCCCC'), light: Color.fromHex('#555555'), hcDark: Color.white, hcLight: foreground }, nls.localize('keybindingLabelForeground', \"Keybinding label foreground color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBorder = registerColor('keybindingLabel.border', { dark: new Color(new RGBA(51, 51, 51, 0.6)), light: new Color(new RGBA(204, 204, 204, 0.4)), hcDark: new Color(new RGBA(111, 195, 223)), hcLight: contrastBorder }, nls.localize('keybindingLabelBorder', \"Keybinding label border color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBottomBorder = registerColor('keybindingLabel.bottomBorder', { dark: new Color(new RGBA(68, 68, 68, 0.6)), light: new Color(new RGBA(187, 187, 187, 0.4)), hcDark: new Color(new RGBA(111, 195, 223)), hcLight: foreground }, nls.localize('keybindingLabelBottomBorder', \"Keybinding label border bottom color. The keybinding label is used to represent a keyboard shortcut.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { registerColor } from '../colorUtils.js';\n// Import the colors we need\nimport { contrastBorder, activeContrastBorder } from './baseColors.js';\nimport { selectForeground, selectBackground } from './inputColors.js';\nimport { listActiveSelectionBackground, listActiveSelectionForeground } from './listColors.js';\nexport const menuBorder = registerColor('menu.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('menuBorder', \"Border color of menus.\"));\nexport const menuForeground = registerColor('menu.foreground', selectForeground, nls.localize('menuForeground', \"Foreground color of menu items.\"));\nexport const menuBackground = registerColor('menu.background', selectBackground, nls.localize('menuBackground', \"Background color of menu items.\"));\nexport const menuSelectionForeground = registerColor('menu.selectionForeground', listActiveSelectionForeground, nls.localize('menuSelectionForeground', \"Foreground color of the selected menu item in menus.\"));\nexport const menuSelectionBackground = registerColor('menu.selectionBackground', listActiveSelectionBackground, nls.localize('menuSelectionBackground', \"Background color of the selected menu item in menus.\"));\nexport const menuSelectionBorder = registerColor('menu.selectionBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('menuSelectionBorder', \"Border color of the selected menu item in menus.\"));\nexport const menuSeparatorBackground = registerColor('menu.separatorBackground', { dark: '#606060', light: '#D4D4D4', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('menuSeparatorBackground', \"Color of a separator menu item in menus.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { registerColor, oneOf } from '../colorUtils.js';\n// Import the colors we need\nimport { editorWidgetBackground, editorWidgetForeground } from './editorColors.js';\nimport { listActiveSelectionBackground, listActiveSelectionForeground, listActiveSelectionIconForeground } from './listColors.js';\nexport const quickInputBackground = registerColor('quickInput.background', editorWidgetBackground, nls.localize('pickerBackground', \"Quick picker background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputForeground = registerColor('quickInput.foreground', editorWidgetForeground, nls.localize('pickerForeground', \"Quick picker foreground color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputTitleBackground = registerColor('quickInputTitle.background', { dark: new Color(new RGBA(255, 255, 255, 0.105)), light: new Color(new RGBA(0, 0, 0, 0.06)), hcDark: '#000000', hcLight: Color.white }, nls.localize('pickerTitleBackground', \"Quick picker title background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const pickerGroupForeground = registerColor('pickerGroup.foreground', { dark: '#3794FF', light: '#0066BF', hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('pickerGroupForeground', \"Quick picker color for grouping labels.\"));\nexport const pickerGroupBorder = registerColor('pickerGroup.border', { dark: '#3F3F46', light: '#CCCEDB', hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('pickerGroupBorder', \"Quick picker color for grouping borders.\"));\nexport const _deprecatedQuickInputListFocusBackground = registerColor('quickInput.list.focusBackground', null, '', undefined, nls.localize('quickInput.list.focusBackground deprecation', \"Please use quickInputList.focusBackground instead\"));\nexport const quickInputListFocusForeground = registerColor('quickInputList.focusForeground', listActiveSelectionForeground, nls.localize('quickInput.listFocusForeground', \"Quick picker foreground color for the focused item.\"));\nexport const quickInputListFocusIconForeground = registerColor('quickInputList.focusIconForeground', listActiveSelectionIconForeground, nls.localize('quickInput.listFocusIconForeground', \"Quick picker icon foreground color for the focused item.\"));\nexport const quickInputListFocusBackground = registerColor('quickInputList.focusBackground', { dark: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), light: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), hcDark: null, hcLight: null }, nls.localize('quickInput.listFocusBackground', \"Quick picker background color for the focused item.\"));\n"],"names":["listFocusBackground","listFocusForeground","listFocusOutline","dark","light","hcDark","hcLight","listFocusAndSelectionOutline","listActiveSelectionBackground","fromHex","transparent","listActiveSelectionForeground","white","listActiveSelectionIconForeground","listInactiveSelectionBackground","listInactiveSelectionForeground","listInactiveSelectionIconForeground","listInactiveFocusBackground","listInactiveFocusOutline","listHoverBackground","listHoverForeground","listDropOverBackground","listDropBetweenBackground","listHighlightForeground","listFocusHighlightForeground","listFilterWidgetBackground","listFilterWidgetOutline","listFilterWidgetNoMatchesOutline","listFilterWidgetShadow","treeIndentGuidesStroke","treeInactiveIndentGuidesStroke","tableColumnsBorder","tableOddRowsBackgroundColor","ColorScheme","isHighContrast","scheme","HIGH_CONTRAST_DARK","HIGH_CONTRAST_LIGHT","isDark","DARK","badgeBackground","black","badgeForeground","scrollbarShadow","scrollbarSliderBackground","scrollbarSliderHoverBackground","scrollbarSliderActiveBackground","progressBarBackground","inputBackground","inputForeground","inputBorder","inputActiveOptionBorder","inputActiveOptionHoverBackground","inputActiveOptionBackground","inputActiveOptionForeground","inputValidationInfoBackground","inputValidationInfoForeground","inputValidationInfoBorder","inputValidationWarningBackground","inputValidationWarningForeground","inputValidationWarningBorder","inputValidationErrorBackground","inputValidationErrorForeground","inputValidationErrorBorder","selectBackground","selectListBackground","selectForeground","selectBorder","buttonForeground","buttonSeparator","buttonBackground","buttonHoverBackground","buttonBorder","buttonSecondaryForeground","buttonSecondaryBackground","buttonSecondaryHoverBackground","radioActiveForeground","radioActiveBackground","radioActiveBorder","radioInactiveForeground","radioInactiveBackground","radioInactiveBorder","radioInactiveHoverBackground","checkboxBackground","checkboxForeground","checkboxBorder","keybindingLabelBackground","keybindingLabelForeground","keybindingLabelBorder","keybindingLabelBottomBorder","menuBorder","menuForeground","menuBackground","menuSelectionForeground","menuSelectionBackground","menuSelectionBorder","menuSeparatorBackground","quickInputBackground","quickInputForeground","quickInputTitleBackground","pickerGroupForeground","pickerGroupBorder","_deprecatedQuickInputListFocusBackground","undefined","quickInputListFocusForeground","quickInputListFocusIconForeground","quickInputListFocusBackground"],"sourceRoot":""}